{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertScholarshipApplicationSchema, insertWhatsappSubscriptionSchema, insertChatMessageSchema } from \"@shared/schema\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Scholarship eligibility endpoint\n  app.post(\"/api/check-eligibility\", async (req, res) => {\n    try {\n      const data = insertScholarshipApplicationSchema.parse(req.body);\n      \n      // Mock scholarship matching logic\n      const scholarships = [];\n      \n      if (data.educationLevel === \"pre-matric\") {\n        scholarships.push({\n          name: \"Pre-Matric Scholarship for SC/ST Students\",\n          amount: \"₹1,200-₹12,000\",\n          deadline: \"2024-03-31\",\n          eligible: [\"sc\", \"st\"].includes(data.casteCategory.toLowerCase())\n        });\n      }\n      \n      if (data.educationLevel === \"post-matric\") {\n        scholarships.push({\n          name: \"Post-Matric Scholarship for SC/ST Students\", \n          amount: \"₹15,000-₹85,000\",\n          deadline: \"2024-04-30\",\n          eligible: [\"sc\", \"st\"].includes(data.casteCategory.toLowerCase())\n        });\n      }\n      \n      if (data.incomeLevel === \"below-2-lakh\") {\n        scholarships.push({\n          name: \"Merit-cum-Means Scholarship\",\n          amount: \"₹20,000-₹50,000\", \n          deadline: \"2024-05-15\",\n          eligible: true\n        });\n      }\n      \n      const eligibleScholarships = scholarships.filter(s => s.eligible);\n      \n      const application = await storage.createScholarshipApplication({\n        ...data,\n        eligibleScholarships: eligibleScholarships\n      });\n      \n      res.json({ success: true, scholarships: eligibleScholarships, applicationId: application.id });\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid data provided\" });\n    }\n  });\n\n  // WhatsApp subscription endpoint\n  app.post(\"/api/subscribe-whatsapp\", async (req, res) => {\n    try {\n      const data = insertWhatsappSubscriptionSchema.parse(req.body);\n      \n      // Check if already subscribed\n      const existing = await storage.getWhatsappSubscription(data.phoneNumber);\n      if (existing) {\n        return res.json({ success: true, message: \"Already subscribed\" });\n      }\n      \n      const subscription = await storage.createWhatsappSubscription(data);\n      res.json({ success: true, subscription });\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid phone number\" });\n    }\n  });\n\n  // Help centers endpoint\n  app.get(\"/api/help-centers\", async (req, res) => {\n    try {\n      const { pincode, type } = req.query;\n      const centers = await storage.getHelpCenters(\n        pincode as string, \n        type as string\n      );\n      res.json(centers);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch help centers\" });\n    }\n  });\n\n  // Chat with AI assistant\n  app.post(\"/api/chat\", async (req, res) => {\n    try {\n      const data = insertChatMessageSchema.parse(req.body);\n      \n      // Get AI response from OpenAI\n      // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a helpful scholarship assistant for Indian students. Help them with Aadhaar seeding, DBT processes, and scholarship applications. Be concise and practical.\"\n          },\n          {\n            role: \"user\", \n            content: data.message\n          }\n        ],\n        response_format: { type: \"json_object\" }\n      });\n\n      const aiResponse = JSON.parse(completion.choices[0].message.content || '{\"response\": \"I apologize, but I could not process your request.\"}');\n      \n      const chatMessage = await storage.createChatMessage({\n        ...data,\n        response: aiResponse.response\n      });\n      \n      res.json({ response: aiResponse.response, messageId: chatMessage.id });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get AI response\" });\n    }\n  });\n\n  // Gamification endpoints\n  app.post(\"/api/quiz-score\", async (req, res) => {\n    try {\n      const { userId, score, quizType } = req.body;\n      \n      const existing = await storage.getGamificationProgress(userId);\n      const newQuizScores = existing?.quizScores ? \n        { ...existing.quizScores, [quizType]: score } : \n        { [quizType]: score };\n      \n      const newBadges = [];\n      if (score >= 80) newBadges.push(`${quizType}_expert`);\n      if (score >= 60) newBadges.push(`${quizType}_proficient`);\n      \n      const progress = await storage.updateGamificationProgress(userId, {\n        quizScores: newQuizScores,\n        badges: newBadges,\n        totalPoints: (existing?.totalPoints || 0) + score\n      });\n      \n      res.json({ success: true, progress });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update progress\" });\n    }\n  });\n\n  app.get(\"/api/gamification/:userId\", async (req, res) => {\n    try {\n      const progress = await storage.getGamificationProgress(req.params.userId);\n      res.json(progress || { level: 1, totalPoints: 0, badges: [], quizScores: {} });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch progress\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":5669},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type ScholarshipApplication,\n  type InsertScholarshipApplication,\n  type WhatsappSubscription,\n  type InsertWhatsappSubscription,\n  type HelpCenter,\n  type GamificationProgress,\n  type ChatMessage,\n  type InsertChatMessage\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  createScholarshipApplication(app: InsertScholarshipApplication): Promise<ScholarshipApplication>;\n  getScholarshipApplicationsByUser(userId: string): Promise<ScholarshipApplication[]>;\n  \n  createWhatsappSubscription(sub: InsertWhatsappSubscription): Promise<WhatsappSubscription>;\n  getWhatsappSubscription(phoneNumber: string): Promise<WhatsappSubscription | undefined>;\n  \n  getHelpCenters(pincode?: string, type?: string): Promise<HelpCenter[]>;\n  \n  getGamificationProgress(userId: string): Promise<GamificationProgress | undefined>;\n  updateGamificationProgress(userId: string, progress: Partial<GamificationProgress>): Promise<GamificationProgress>;\n  \n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  getChatHistory(userId: string): Promise<ChatMessage[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private scholarshipApplications: Map<string, ScholarshipApplication>;\n  private whatsappSubscriptions: Map<string, WhatsappSubscription>;\n  private helpCenters: Map<string, HelpCenter>;\n  private gamificationProgress: Map<string, GamificationProgress>;\n  private chatMessages: Map<string, ChatMessage>;\n\n  constructor() {\n    this.users = new Map();\n    this.scholarshipApplications = new Map();\n    this.whatsappSubscriptions = new Map();\n    this.helpCenters = new Map();\n    this.gamificationProgress = new Map();\n    this.chatMessages = new Map();\n    \n    // Initialize some help centers data\n    this.initializeHelpCenters();\n  }\n\n  private initializeHelpCenters() {\n    const centers: HelpCenter[] = [\n      {\n        id: randomUUID(),\n        name: \"State Bank of India - Main Branch\",\n        type: \"bank\",\n        address: \"Gandhi Maidan, Patna, Bihar 800001\",\n        phoneNumber: \"0612-2234567\",\n        latitude: \"25.6093\",\n        longitude: \"85.1376\",\n        pincode: \"800001\",\n        services: [\"aadhaar_seeding\", \"dbt_verification\", \"account_opening\"]\n      },\n      {\n        id: randomUUID(),\n        name: \"Common Service Center\",\n        type: \"csc\",\n        address: \"Boring Road, Patna, Bihar 800013\",\n        phoneNumber: \"9876543210\",\n        latitude: \"25.5941\",\n        longitude: \"85.1376\",\n        pincode: \"800013\",\n        services: [\"aadhaar_seeding\", \"digital_services\"]\n      },\n      {\n        id: randomUUID(),\n        name: \"UIDAI Enrollment Center\",\n        type: \"uidai\",\n        address: \"Kankarbagh, Patna, Bihar 800020\",\n        phoneNumber: \"0612-2345678\",\n        latitude: \"25.5744\",\n        longitude: \"85.0960\",\n        pincode: \"800020\",\n        services: [\"aadhaar_enrollment\", \"aadhaar_update\"]\n      }\n    ];\n\n    centers.forEach(center => {\n      this.helpCenters.set(center.id, center);\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createScholarshipApplication(app: InsertScholarshipApplication): Promise<ScholarshipApplication> {\n    const id = randomUUID();\n    const application: ScholarshipApplication = { \n      ...app, \n      id, \n      userId: app.userId || null,\n      createdAt: new Date() \n    };\n    this.scholarshipApplications.set(id, application);\n    return application;\n  }\n\n  async getScholarshipApplicationsByUser(userId: string): Promise<ScholarshipApplication[]> {\n    return Array.from(this.scholarshipApplications.values()).filter(\n      (app) => app.userId === userId\n    );\n  }\n\n  async createWhatsappSubscription(sub: InsertWhatsappSubscription): Promise<WhatsappSubscription> {\n    const id = randomUUID();\n    const subscription: WhatsappSubscription = { \n      ...sub, \n      id, \n      isActive: sub.isActive ?? true,\n      createdAt: new Date() \n    };\n    this.whatsappSubscriptions.set(id, subscription);\n    return subscription;\n  }\n\n  async getWhatsappSubscription(phoneNumber: string): Promise<WhatsappSubscription | undefined> {\n    return Array.from(this.whatsappSubscriptions.values()).find(\n      (sub) => sub.phoneNumber === phoneNumber\n    );\n  }\n\n  async getHelpCenters(pincode?: string, type?: string): Promise<HelpCenter[]> {\n    let centers = Array.from(this.helpCenters.values());\n    \n    if (pincode) {\n      centers = centers.filter(center => center.pincode === pincode);\n    }\n    \n    if (type) {\n      centers = centers.filter(center => center.type === type);\n    }\n    \n    return centers;\n  }\n\n  async getGamificationProgress(userId: string): Promise<GamificationProgress | undefined> {\n    return Array.from(this.gamificationProgress.values()).find(\n      (progress) => progress.userId === userId\n    );\n  }\n\n  async updateGamificationProgress(userId: string, progressUpdate: Partial<GamificationProgress>): Promise<GamificationProgress> {\n    const existing = await this.getGamificationProgress(userId);\n    \n    const progress: GamificationProgress = existing ? \n      { ...existing, ...progressUpdate } : \n      { \n        id: randomUUID(), \n        userId, \n        quizScores: null,\n        badges: null,\n        level: 1,\n        totalPoints: 0,\n        ...progressUpdate \n      };\n    \n    this.gamificationProgress.set(progress.id, progress);\n    return progress;\n  }\n\n  async createChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const chatMessage: ChatMessage = { \n      ...message, \n      id, \n      userId: message.userId || null,\n      response: message.response || null,\n      timestamp: new Date() \n    };\n    this.chatMessages.set(id, chatMessage);\n    return chatMessage;\n  }\n\n  async getChatHistory(userId: string): Promise<ChatMessage[]> {\n    return Array.from(this.chatMessages.values())\n      .filter((msg) => msg.userId === userId)\n      .sort((a, b) => (a.timestamp?.getTime() || 0) - (b.timestamp?.getTime() || 0));\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":6686},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, boolean, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const scholarshipApplications = pgTable(\"scholarship_applications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"),\n  educationLevel: text(\"education_level\").notNull(),\n  casteCategory: text(\"caste_category\").notNull(),\n  incomeLevel: text(\"income_level\").notNull(),\n  eligibleScholarships: jsonb(\"eligible_scholarships\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const whatsappSubscriptions = pgTable(\"whatsapp_subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  phoneNumber: text(\"phone_number\").notNull().unique(),\n  isActive: boolean(\"is_active\").default(true),\n  preferences: jsonb(\"preferences\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const helpCenters = pgTable(\"help_centers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // 'bank', 'csc', 'uidai'\n  address: text(\"address\").notNull(),\n  phoneNumber: text(\"phone_number\"),\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n  pincode: text(\"pincode\"),\n  services: jsonb(\"services\"),\n});\n\nexport const gamificationProgress = pgTable(\"gamification_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"),\n  quizScores: jsonb(\"quiz_scores\"),\n  badges: jsonb(\"badges\"),\n  level: integer(\"level\").default(1),\n  totalPoints: integer(\"total_points\").default(0),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"),\n  message: text(\"message\").notNull(),\n  response: text(\"response\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertScholarshipApplicationSchema = createInsertSchema(scholarshipApplications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWhatsappSubscriptionSchema = createInsertSchema(whatsappSubscriptions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertHelpCenterSchema = createInsertSchema(helpCenters).omit({\n  id: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type ScholarshipApplication = typeof scholarshipApplications.$inferSelect;\nexport type WhatsappSubscription = typeof whatsappSubscriptions.$inferSelect;\nexport type HelpCenter = typeof helpCenters.$inferSelect;\nexport type GamificationProgress = typeof gamificationProgress.$inferSelect;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertScholarshipApplication = z.infer<typeof insertScholarshipApplicationSchema>;\nexport type InsertWhatsappSubscription = z.infer<typeof insertWhatsappSubscriptionSchema>;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n","size_bytes":3493},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":699},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(220 91% 28%); /* Enhanced government blue */\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(142 76% 36%); /* Indian flag green */\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(30 100% 55%); /* Enhanced saffron */\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(221.2 83.2% 53.3%);\n  --radius: 8px;\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  \n  /* Gradient variables */\n  --gradient-primary: linear-gradient(135deg, hsl(220 91% 28%) 0%, hsl(30 100% 55%) 50%, hsl(142 76% 36%) 100%);\n  --gradient-secondary: linear-gradient(45deg, hsl(220 91% 28%) 0%, hsl(142 76% 36%) 100%);\n  --gradient-accent: linear-gradient(90deg, hsl(30 100% 55%) 0%, hsl(220 91% 28%) 100%);\n}\n\n.dark {\n  --background: hsl(220 30% 8%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(220 30% 10%);\n  --card-foreground: hsl(210 40% 98%);\n  --primary: hsl(220 91% 35%);\n  --primary-foreground: hsl(220 30% 8%);\n  --secondary: hsl(142 76% 40%);\n  --secondary-foreground: hsl(220 30% 8%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(30 100% 65%);\n  --accent-foreground: hsl(220 30% 8%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(212.7 26.8% 83.9%);\n  \n  /* Dark mode gradients */\n  --gradient-primary: linear-gradient(135deg, hsl(220 91% 35%) 0%, hsl(30 100% 65%) 50%, hsl(142 76% 40%) 100%);\n  --gradient-secondary: linear-gradient(45deg, hsl(220 91% 35%) 0%, hsl(142 76% 40%) 100%);\n  --gradient-accent: linear-gradient(90deg, hsl(30 100% 65%) 0%, hsl(220 91% 35%) 100%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased text-foreground;\n    background: linear-gradient(135deg, \n      hsl(var(--background)) 0%, \n      hsl(var(--muted)) 50%, \n      hsl(var(--background)) 100%);\n    min-height: 100vh;\n  }\n}\n\n/* Custom animations */\n.animate-bounce-slow {\n  animation: bounce 2s infinite;\n}\n\n.gradient-text {\n  background: var(--gradient-secondary);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  font-weight: 600;\n}\n\n.gradient-bg {\n  background: var(--gradient-primary);\n}\n\n.gradient-bg-secondary {\n  background: var(--gradient-secondary);\n}\n\n.gradient-bg-accent {\n  background: var(--gradient-accent);\n}\n\n.glass-effect {\n  backdrop-filter: blur(10px);\n  background: rgba(255, 255, 255, 0.9);\n}\n\n.progress-step.active {\n  background: hsl(220 91% 23%);\n  color: white;\n}\n\n.progress-step.completed {\n  background: hsl(142 76% 36%);\n  color: white;\n}\n\n/* Voice assistant styles */\n.voice-recording {\n  animation: pulse 1.5s infinite;\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.5; }\n}\n\n/* Map styles */\n.map-marker {\n  cursor: pointer;\n  transition: transform 0.2s;\n}\n\n.map-marker:hover {\n  transform: scale(1.1);\n}\n\n/* Chat bubble styles */\n.chat-bubble {\n  max-width: 80%;\n  word-wrap: break-word;\n}\n\n.chat-bubble.user {\n  margin-left: auto;\n  background: var(--gradient-secondary);\n  color: hsl(210 40% 98%);\n}\n\n.chat-bubble.assistant {\n  margin-right: auto;\n  background: hsl(210 40% 96%);\n  color: hsl(222.2 84% 4.9%);\n}\n\n/* Enhanced animations */\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideInRight {\n  from {\n    opacity: 0;\n    transform: translateX(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes shimmer {\n  0% { background-position: -200px 0; }\n  100% { background-position: calc(200px + 100%) 0; }\n}\n\n.animate-fadeInUp {\n  animation: fadeInUp 0.6s ease-out;\n}\n\n.animate-slideInRight {\n  animation: slideInRight 0.5s ease-out;\n}\n\n.shimmer {\n  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);\n  background-size: 200px 100%;\n  animation: shimmer 1.5s infinite;\n}\n\n/* Enhanced card effects */\n.card-hover {\n  transition: all 0.3s ease;\n  border: 1px solid hsl(var(--border));\n}\n\n.card-hover:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n  border-color: hsl(var(--primary));\n}\n\n/* Progress indicators */\n.progress-glow {\n  box-shadow: 0 0 10px hsl(var(--primary));\n}\n\n/* Language selector styles */\n.language-flag {\n  width: 20px;\n  height: 15px;\n  border-radius: 2px;\n  display: inline-block;\n  margin-right: 8px;\n}\n","size_bytes":5067},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ai-chat-assistant.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageSquare, Send, User, Bot, Loader2, ThumbsUp, ThumbsDown } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type Language, useTranslation } from \"@/lib/i18n\";\n\ninterface AIchatAssistantProps {\n  isOpen: boolean;\n  onClose: () => void;\n  language: Language;\n}\n\ninterface ChatMessage {\n  id: string;\n  content: string;\n  isUser: boolean;\n  timestamp: Date;\n  helpful?: boolean;\n}\n\nconst quickQuestions = [\n  \"How do I check if my bank account is DBT-enabled?\",\n  \"What documents are needed for scholarship application?\",\n  \"My scholarship payment is delayed, what should I do?\",\n  \"How to link Aadhaar with bank account?\",\n  \"Which scholarships am I eligible for?\",\n  \"How to track scholarship application status?\"\n];\n\nexport default function AIchatAssistant({ isOpen, onClose, language }: AIchatAssistantProps) {\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    {\n      id: \"welcome\",\n      content: language === 'en' \n        ? \"Hi! I'm your scholarship assistant. I can help you with Aadhaar seeding, DBT processes, and scholarship applications. How can I assist you today?\"\n        : \"नमस्ते! मैं आपका छात्रवृत्ति सहायक हूं। मैं आधार सीडिंग, डीबीटी प्रक्रियाओं और छात्रवृत्ति आवेदनों में आपकी मदद कर सकता हूं। आज मैं आपकी कैसे सहायता कर सकता हूं?\",\n      isUser: false,\n      timestamp: new Date()\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const t = useTranslation(language);\n  const { toast } = useToast();\n\n  const userId = \"guest\"; // In real app, get from auth context\n\n  const chatMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest('POST', '/api/chat', {\n        message,\n        userId\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      const assistantMessage: ChatMessage = {\n        id: `assistant-${Date.now()}`,\n        content: data.response,\n        isUser: false,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n      setIsTyping(false);\n    },\n    onError: () => {\n      const errorMessage: ChatMessage = {\n        id: `error-${Date.now()}`,\n        content: language === 'en' \n          ? \"I'm sorry, I'm having trouble responding right now. Please try again in a moment.\"\n          : \"मुझे खेद है, मुझे अभी जवाब देने में परेशानी हो रही है। कृपया एक क्षण में पुनः प्रयास करें।\",\n        isUser: false,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n      setIsTyping(false);\n      toast({\n        title: \"Connection Error\",\n        description: \"Unable to reach the AI assistant. Please check your connection.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim() || chatMutation.isPending) return;\n\n    const userMessage: ChatMessage = {\n      id: `user-${Date.now()}`,\n      content: inputMessage,\n      isUser: true,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setIsTyping(true);\n    chatMutation.mutate(inputMessage);\n    setInputMessage(\"\");\n  };\n\n  const handleQuickQuestion = (question: string) => {\n    const userMessage: ChatMessage = {\n      id: `user-${Date.now()}`,\n      content: question,\n      isUser: true,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setIsTyping(true);\n    chatMutation.mutate(question);\n  };\n\n  const handleFeedback = (messageId: string, helpful: boolean) => {\n    setMessages(prev => \n      prev.map(msg => \n        msg.id === messageId ? { ...msg, helpful } : msg\n      )\n    );\n    \n    toast({\n      title: helpful ? \"Thank you!\" : \"Feedback received\",\n      description: helpful \n        ? \"Your feedback helps us improve our assistance.\"\n        : \"We'll work on providing better responses.\",\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;\n    }\n  }, [messages, isTyping]);\n\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isOpen]);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] p-0\" data-testid=\"ai-chat-assistant\">\n        <DialogHeader className=\"p-6 pb-0\">\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Bot className=\"text-primary\" />\n            AI Scholarship Assistant\n            <Badge variant=\"secondary\" className=\"ml-2\">Online</Badge>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex flex-col h-[60vh]\">\n          {/* Chat Messages */}\n          <ScrollArea className=\"flex-1 p-6\" ref={scrollAreaRef}>\n            <div className=\"space-y-4\">\n              {messages.map((message) => (\n                <div key={message.id} className={`flex gap-3 ${message.isUser ? 'justify-end' : 'justify-start'}`}>\n                  {!message.isUser && (\n                    <div className=\"bg-primary text-primary-foreground w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0\">\n                      <Bot size={16} />\n                    </div>\n                  )}\n                  \n                  <div className={`max-w-[80%] ${message.isUser ? 'order-first' : ''}`}>\n                    <Card className={`${message.isUser ? 'bg-primary text-primary-foreground ml-auto' : 'bg-muted'}`}>\n                      <CardContent className=\"p-3\">\n                        <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                        <div className=\"flex items-center justify-between mt-2\">\n                          <span className={`text-xs ${message.isUser ? 'text-primary-foreground/70' : 'text-muted-foreground'}`}>\n                            {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                          </span>\n                          \n                          {!message.isUser && message.id !== 'welcome' && (\n                            <div className=\"flex gap-1\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                className={`h-6 w-6 p-0 ${message.helpful === true ? 'text-green-600' : 'text-muted-foreground'}`}\n                                onClick={() => handleFeedback(message.id, true)}\n                                data-testid={`helpful-${message.id}`}\n                              >\n                                <ThumbsUp size={12} />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                className={`h-6 w-6 p-0 ${message.helpful === false ? 'text-red-600' : 'text-muted-foreground'}`}\n                                onClick={() => handleFeedback(message.id, false)}\n                                data-testid={`not-helpful-${message.id}`}\n                              >\n                                <ThumbsDown size={12} />\n                              </Button>\n                            </div>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                  \n                  {message.isUser && (\n                    <div className=\"bg-secondary text-secondary-foreground w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0\">\n                      <User size={16} />\n                    </div>\n                  )}\n                </div>\n              ))}\n              \n              {isTyping && (\n                <div className=\"flex gap-3 justify-start\">\n                  <div className=\"bg-primary text-primary-foreground w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Bot size={16} />\n                  </div>\n                  <Card className=\"bg-muted\">\n                    <CardContent className=\"p-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <Loader2 size={16} className=\"animate-spin\" />\n                        <span className=\"text-sm text-muted-foreground\">AI is typing...</span>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n\n          {/* Quick Questions */}\n          {messages.length === 1 && (\n            <div className=\"px-6 py-4 border-t border-border\">\n              <h4 className=\"text-sm font-medium mb-3\">Quick questions:</h4>\n              <div className=\"grid grid-cols-1 gap-2\">\n                {quickQuestions.slice(0, 3).map((question, index) => (\n                  <Button\n                    key={index}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"justify-start text-left h-auto p-2 text-xs\"\n                    onClick={() => handleQuickQuestion(question)}\n                    data-testid={`quick-question-${index}`}\n                  >\n                    {question}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Message Input */}\n          <div className=\"p-6 pt-4 border-t border-border\">\n            <div className=\"flex gap-2\">\n              <Input\n                ref={inputRef}\n                value={inputMessage}\n                onChange={(e) => setInputMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder={language === 'en' ? \"Type your question...\" : \"अपना सवाल लिखें...\"}\n                disabled={chatMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"chat-input\"\n              />\n              <Button\n                onClick={handleSendMessage}\n                disabled={!inputMessage.trim() || chatMutation.isPending}\n                className=\"px-3\"\n                data-testid=\"send-message-button\"\n              >\n                {chatMutation.isPending ? (\n                  <Loader2 size={16} className=\"animate-spin\" />\n                ) : (\n                  <Send size={16} />\n                )}\n              </Button>\n            </div>\n            \n            <p className=\"text-xs text-muted-foreground mt-2\">\n              AI responses are generated and may not always be accurate. Please verify important information.\n            </p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11916},"client/src/components/countdown-tracker.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Calendar, Clock, Bell, Download } from \"lucide-react\";\nimport { type Language, useTranslation } from \"@/lib/i18n\";\n\ninterface CountdownTrackerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  language: Language;\n}\n\ninterface ScholarshipTimeline {\n  id: string;\n  name: string;\n  phases: {\n    name: string;\n    date: string;\n    status: 'completed' | 'active' | 'upcoming';\n    description: string;\n  }[];\n}\n\nconst scholarshipTimelines: ScholarshipTimeline[] = [\n  {\n    id: \"pre-matric-sc-st\",\n    name: \"Pre-Matric Scholarship for SC/ST Students\",\n    phases: [\n      {\n        name: \"Application Period\",\n        date: \"2024-01-15 to 2024-03-31\",\n        status: \"completed\",\n        description: \"Online application submission period\"\n      },\n      {\n        name: \"Document Verification\",\n        date: \"2024-04-01 to 2024-04-30\",\n        status: \"active\",\n        description: \"Verification of submitted documents by authorities\"\n      },\n      {\n        name: \"Approval & Sanction\",\n        date: \"2024-05-01 to 2024-05-31\",\n        status: \"upcoming\",\n        description: \"Final approval and scholarship amount sanctioning\"\n      },\n      {\n        name: \"Fund Disbursement\",\n        date: \"2024-06-01 to 2024-06-15\",\n        status: \"upcoming\",\n        description: \"Direct transfer to DBT-enabled bank accounts\"\n      }\n    ]\n  },\n  {\n    id: \"post-matric-obc\",\n    name: \"Post-Matric Scholarship for OBC Students\",\n    phases: [\n      {\n        name: \"Application Period\",\n        date: \"2024-02-01 to 2024-04-30\",\n        status: \"active\",\n        description: \"Online application submission period\"\n      },\n      {\n        name: \"Document Verification\",\n        date: \"2024-05-01 to 2024-05-31\",\n        status: \"upcoming\",\n        description: \"Verification of submitted documents by authorities\"\n      },\n      {\n        name: \"Merit List Preparation\",\n        date: \"2024-06-01 to 2024-06-15\",\n        status: \"upcoming\",\n        description: \"Preparation of merit-based selection list\"\n      },\n      {\n        name: \"Fund Disbursement\",\n        date: \"2024-07-01 to 2024-07-15\",\n        status: \"upcoming\",\n        description: \"Direct transfer to DBT-enabled bank accounts\"\n      }\n    ]\n  }\n];\n\nexport default function CountdownTracker({ isOpen, onClose, language }: CountdownTrackerProps) {\n  const [selectedTimeline, setSelectedTimeline] = useState(scholarshipTimelines[0]);\n  const [timeRemaining, setTimeRemaining] = useState<Record<string, string>>({});\n  const t = useTranslation(language);\n\n  useEffect(() => {\n    const updateCountdown = () => {\n      const newTimeRemaining: Record<string, string> = {};\n      \n      scholarshipTimelines.forEach(timeline => {\n        timeline.phases.forEach(phase => {\n          if (phase.status === 'active' || phase.status === 'upcoming') {\n            const endDate = new Date(phase.date.split(' to ')[1] || phase.date);\n            const now = new Date();\n            const difference = endDate.getTime() - now.getTime();\n            \n            if (difference > 0) {\n              const days = Math.floor(difference / (1000 * 60 * 60 * 24));\n              const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n              const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n              \n              newTimeRemaining[`${timeline.id}-${phase.name}`] = `${days}d ${hours}h ${minutes}m`;\n            } else {\n              newTimeRemaining[`${timeline.id}-${phase.name}`] = \"Expired\";\n            }\n          }\n        });\n      });\n      \n      setTimeRemaining(newTimeRemaining);\n    };\n\n    updateCountdown();\n    const interval = setInterval(updateCountdown, 60000); // Update every minute\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'text-green-600 bg-green-100';\n      case 'active':\n        return 'text-blue-600 bg-blue-100';\n      case 'upcoming':\n        return 'text-gray-600 bg-gray-100';\n      default:\n        return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return '✅';\n      case 'active':\n        return '🔄';\n      case 'upcoming':\n        return '⏳';\n      default:\n        return '📅';\n    }\n  };\n\n  const generateCalendarEvent = (phase: any) => {\n    const startDate = new Date(phase.date.split(' to ')[0]);\n    const endDate = new Date(phase.date.split(' to ')[1] || phase.date);\n    \n    const calendarEvent = {\n      title: `${selectedTimeline.name} - ${phase.name}`,\n      start: startDate.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z',\n      end: endDate.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z',\n      description: phase.description\n    };\n\n    const googleCalendarUrl = `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(calendarEvent.title)}&dates=${calendarEvent.start}/${calendarEvent.end}&details=${encodeURIComponent(calendarEvent.description)}`;\n    \n    window.open(googleCalendarUrl, '_blank');\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"countdown-tracker\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"text-primary\" />\n            Scholarship Timeline Tracker\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          {/* Scholarship Selection */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold\">Select Scholarship</h3>\n            {scholarshipTimelines.map((timeline) => (\n              <Card \n                key={timeline.id}\n                className={`cursor-pointer transition-colors ${\n                  selectedTimeline.id === timeline.id ? 'border-primary bg-primary/5' : 'hover:bg-muted'\n                }`}\n                onClick={() => setSelectedTimeline(timeline)}\n                data-testid={`timeline-${timeline.id}`}\n              >\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm\">{timeline.name}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                    <Clock size={12} />\n                    <span>{timeline.phases.length} phases</span>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Timeline Display */}\n          <div className=\"lg:col-span-2 space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"font-semibold\">{selectedTimeline.name}</h3>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => generateCalendarEvent(selectedTimeline.phases.find(p => p.status === 'active' || p.status === 'upcoming'))}\n                data-testid=\"add-to-calendar-button\"\n              >\n                <Calendar className=\"mr-2\" size={14} />\n                Add to Calendar\n              </Button>\n            </div>\n\n            <div className=\"space-y-4\">\n              {selectedTimeline.phases.map((phase, index) => (\n                <Card key={index} className=\"relative\">\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"flex items-center justify-between text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-lg\">{getStatusIcon(phase.status)}</span>\n                        <span>{phase.name}</span>\n                      </div>\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(phase.status)}`}>\n                        {phase.status.charAt(0).toUpperCase() + phase.status.slice(1)}\n                      </span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                      <Calendar size={14} />\n                      <span>{phase.date}</span>\n                    </div>\n                    \n                    <p className=\"text-sm\">{phase.description}</p>\n                    \n                    {(phase.status === 'active' || phase.status === 'upcoming') && \n                     timeRemaining[`${selectedTimeline.id}-${phase.name}`] && (\n                      <div className=\"bg-accent/10 p-3 rounded-lg\">\n                        <div className=\"flex items-center gap-2 text-sm font-medium text-accent\">\n                          <Clock size={14} />\n                          <span>\n                            {phase.status === 'active' ? 'Time Remaining: ' : 'Starts in: '}\n                            {timeRemaining[`${selectedTimeline.id}-${phase.name}`]}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n\n                    {phase.status === 'active' && (\n                      <div className=\"flex gap-2\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => generateCalendarEvent(phase)}\n                          data-testid=\"set-reminder-button\"\n                        >\n                          <Bell className=\"mr-2\" size={12} />\n                          Set Reminder\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n\n                  {/* Progress Line */}\n                  {index < selectedTimeline.phases.length - 1 && (\n                    <div className=\"absolute left-6 top-full w-0.5 h-4 bg-border\"></div>\n                  )}\n                </Card>\n              ))}\n            </div>\n\n            {/* Quick Actions */}\n            <Card className=\"bg-muted\">\n              <CardContent className=\"pt-6\">\n                <h4 className=\"font-semibold mb-3\">Quick Actions</h4>\n                <div className=\"grid md:grid-cols-2 gap-3\">\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"download-timeline-button\">\n                    <Download className=\"mr-2\" size={14} />\n                    Download Timeline\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"check-status-button\">\n                    <Clock className=\"mr-2\" size={14} />\n                    Check Status\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11195},"client/src/components/dbt-simulator.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CheckCircle, XCircle, AlertCircle, ArrowRight } from \"lucide-react\";\nimport { type Language } from \"@/lib/i18n\";\n\ninterface DBTSimulatorProps {\n  isOpen: boolean;\n  onClose: () => void;\n  language: Language;\n}\n\ninterface SimulationStep {\n  id: number;\n  title: string;\n  description: string;\n  status: 'pending' | 'success' | 'error' | 'warning';\n}\n\nexport default function DBTSimulator({ isOpen, onClose, language }: DBTSimulatorProps) {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [aadhaarNumber, setAadhaarNumber] = useState(\"\");\n  const [accountNumber, setAccountNumber] = useState(\"\");\n  const [isSimulationStarted, setIsSimulationStarted] = useState(false);\n  const [simulationSteps, setSimulationSteps] = useState<SimulationStep[]>([]);\n\n  const startSimulation = () => {\n    if (!aadhaarNumber || !accountNumber) return;\n\n    const steps: SimulationStep[] = [\n      {\n        id: 1,\n        title: \"Connecting to UIDAI Database\",\n        description: \"Verifying Aadhaar number authenticity\",\n        status: 'pending'\n      },\n      {\n        id: 2,\n        title: \"Bank Account Verification\",\n        description: \"Checking account details and KYC status\",\n        status: 'pending'\n      },\n      {\n        id: 3,\n        title: \"Aadhaar-Account Linkage Check\",\n        description: \"Verifying if Aadhaar is linked to bank account\",\n        status: 'pending'\n      },\n      {\n        id: 4,\n        title: \"DBT Enablement Status\",\n        description: \"Checking if account is DBT-enabled for transfers\",\n        status: 'pending'\n      },\n      {\n        id: 5,\n        title: \"Final Verification\",\n        description: \"Confirming eligibility for scholarship transfers\",\n        status: 'pending'\n      }\n    ];\n\n    setSimulationSteps(steps);\n    setIsSimulationStarted(true);\n    setCurrentStep(0);\n\n    // Simulate step-by-step verification\n    simulateSteps(steps);\n  };\n\n  const simulateSteps = (steps: SimulationStep[]) => {\n    steps.forEach((step, index) => {\n      setTimeout(() => {\n        setCurrentStep(index + 1);\n        setSimulationSteps(prevSteps => \n          prevSteps.map(s => \n            s.id === step.id \n              ? { ...s, status: getStepStatus(index) }\n              : s\n          )\n        );\n      }, (index + 1) * 2000);\n    });\n  };\n\n  const getStepStatus = (index: number): 'success' | 'error' | 'warning' => {\n    // Simulate different scenarios\n    if (aadhaarNumber.includes('1234')) {\n      if (index === 2) return 'error'; // Account not linked\n      if (index === 3) return 'warning'; // Partial linkage\n    }\n    return 'success';\n  };\n\n  const getStatusIcon = (status: 'pending' | 'success' | 'error' | 'warning') => {\n    switch (status) {\n      case 'success':\n        return <CheckCircle className=\"text-green-500\" size={20} />;\n      case 'error':\n        return <XCircle className=\"text-red-500\" size={20} />;\n      case 'warning':\n        return <AlertCircle className=\"text-yellow-500\" size={20} />;\n      default:\n        return <div className=\"w-5 h-5 border-2 border-gray-300 rounded-full animate-spin\" />;\n    }\n  };\n\n  const resetSimulation = () => {\n    setIsSimulationStarted(false);\n    setCurrentStep(0);\n    setSimulationSteps([]);\n    setAadhaarNumber(\"\");\n    setAccountNumber(\"\");\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\" data-testid=\"dbt-simulator\">\n        <DialogHeader>\n          <DialogTitle>DBT Seeding Status Simulator</DialogTitle>\n        </DialogHeader>\n\n        {!isSimulationStarted ? (\n          <div className=\"space-y-6\">\n            <div className=\"bg-muted p-4 rounded-lg\">\n              <h3 className=\"font-semibold mb-2\">How this simulator works:</h3>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• Enter your Aadhaar and bank account details</li>\n                <li>• Experience a realistic verification process</li>\n                <li>• Understand each step of DBT seeding</li>\n                <li>• Learn what to expect on real portals</li>\n              </ul>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"aadhaar\">Aadhaar Number</Label>\n                <Input\n                  id=\"aadhaar\"\n                  value={aadhaarNumber}\n                  onChange={(e) => setAadhaarNumber(e.target.value)}\n                  placeholder=\"XXXX XXXX XXXX\"\n                  maxLength={12}\n                  data-testid=\"aadhaar-input\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Use 1234 in number for demo error scenario\n                </p>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"account\">Bank Account Number</Label>\n                <Input\n                  id=\"account\"\n                  value={accountNumber}\n                  onChange={(e) => setAccountNumber(e.target.value)}\n                  placeholder=\"Account Number\"\n                  data-testid=\"account-input\"\n                />\n              </div>\n            </div>\n\n            <Button \n              onClick={startSimulation}\n              disabled={!aadhaarNumber || !accountNumber}\n              className=\"w-full\"\n              data-testid=\"start-simulation-button\"\n            >\n              Start DBT Status Check\n              <ArrowRight className=\"ml-2\" size={16} />\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <div className=\"bg-primary/10 p-4 rounded-lg\">\n              <h3 className=\"font-semibold\">Simulation in Progress</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                This is how the verification process works on actual government portals\n              </p>\n            </div>\n\n            <div className=\"space-y-3\">\n              {simulationSteps.map((step, index) => (\n                <Card key={step.id} className={currentStep >= step.id ? \"border-primary\" : \"\"}>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"flex items-center justify-between text-sm\">\n                      <span>Step {step.id}: {step.title}</span>\n                      {getStatusIcon(step.status)}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <p className=\"text-sm text-muted-foreground\">{step.description}</p>\n                    \n                    {step.status === 'error' && (\n                      <div className=\"mt-2 p-2 bg-red-50 border border-red-200 rounded text-sm text-red-700\">\n                        ❌ Error: Aadhaar not linked to this account. Please visit your bank branch.\n                      </div>\n                    )}\n                    \n                    {step.status === 'warning' && (\n                      <div className=\"mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded text-sm text-yellow-700\">\n                        ⚠️ Warning: Partial linkage detected. Additional verification may be required.\n                      </div>\n                    )}\n                    \n                    {step.status === 'success' && (\n                      <div className=\"mt-2 p-2 bg-green-50 border border-green-200 rounded text-sm text-green-700\">\n                        ✅ Success: Verification completed successfully.\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {currentStep >= simulationSteps.length && (\n              <div className=\"mt-6 space-y-4\">\n                <Card className=\"bg-secondary/10\">\n                  <CardContent className=\"pt-6\">\n                    <h3 className=\"font-semibold mb-2\">Simulation Complete!</h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      You've experienced the DBT verification process. In real scenarios, \n                      results may vary based on your actual account status.\n                    </p>\n                    \n                    <div className=\"flex gap-2\">\n                      <Button onClick={resetSimulation} variant=\"outline\" size=\"sm\" data-testid=\"try-again-button\">\n                        Try Different Details\n                      </Button>\n                      <Button onClick={onClose} size=\"sm\" data-testid=\"close-simulator-button\">\n                        Close Simulator\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9173},"client/src/components/eligibility-wizard.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ArrowRight, ArrowLeft, CheckCircle } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type Language, useTranslation } from \"@/lib/i18n\";\n\nconst formSchema = z.object({\n  educationLevel: z.enum([\"pre-matric\", \"post-matric\"]),\n  casteCategory: z.enum([\"general\", \"obc\", \"sc\", \"st\"]),\n  incomeLevel: z.enum([\"below-1-lakh\", \"1-2-lakh\", \"2-5-lakh\", \"above-5-lakh\"]),\n  state: z.string().min(1)\n});\n\ninterface EligibilityWizardProps {\n  isOpen: boolean;\n  onClose: () => void;\n  language: Language;\n}\n\ninterface ScholarshipResult {\n  name: string;\n  amount: string;\n  deadline: string;\n  eligible: boolean;\n}\n\nexport default function EligibilityWizard({ isOpen, onClose, language }: EligibilityWizardProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [results, setResults] = useState<ScholarshipResult[]>([]);\n  const [showResults, setShowResults] = useState(false);\n  const t = useTranslation(language);\n  const { toast } = useToast();\n  \n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      educationLevel: \"pre-matric\",\n      casteCategory: \"general\",\n      incomeLevel: \"below-1-lakh\",\n      state: \"\"\n    }\n  });\n\n  const eligibilityMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof formSchema>) => {\n      const response = await apiRequest('POST', '/api/check-eligibility', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setResults(data.scholarships || []);\n      setShowResults(true);\n      toast({\n        title: \"Eligibility Check Complete\",\n        description: `Found ${data.scholarships?.length || 0} eligible scholarships`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to check eligibility. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const onSubmit = (data: z.infer<typeof formSchema>) => {\n    eligibilityMutation.mutate(data);\n  };\n\n  const nextStep = () => {\n    if (currentStep < 4) setCurrentStep(currentStep + 1);\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) setCurrentStep(currentStep - 1);\n  };\n\n  const resetWizard = () => {\n    setCurrentStep(1);\n    setShowResults(false);\n    setResults([]);\n    form.reset();\n  };\n\n  const steps = [\n    { number: 1, title: \"Education Level\" },\n    { number: 2, title: \"Category\" },\n    { number: 3, title: \"Income\" },\n    { number: 4, title: \"Location\" }\n  ];\n\n  if (showResults) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\" data-testid=\"eligibility-results\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <CheckCircle className=\"text-secondary\" />\n              Eligibility Results\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            {results.length > 0 ? (\n              results.map((scholarship, index) => (\n                <div key={index} className=\"border border-border rounded-lg p-4 bg-card\">\n                  <h3 className=\"font-semibold text-lg mb-2\">{scholarship.name}</h3>\n                  <div className=\"grid md:grid-cols-2 gap-2 text-sm\">\n                    <div>\n                      <span className=\"text-muted-foreground\">Amount: </span>\n                      <span className=\"font-medium text-accent\">{scholarship.amount}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Deadline: </span>\n                      <span className=\"font-medium\">{scholarship.deadline}</span>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">No scholarships found matching your criteria.</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Try adjusting your selection or check back later for new opportunities.\n                </p>\n              </div>\n            )}\n            \n            <div className=\"flex gap-2\">\n              <Button onClick={resetWizard} variant=\"outline\" data-testid=\"restart-wizard\">\n                Check Again\n              </Button>\n              <Button onClick={onClose} data-testid=\"close-results\">\n                {t('close')}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"eligibility-wizard\">\n        <DialogHeader>\n          <DialogTitle>Smart Eligibility Wizard</DialogTitle>\n        </DialogHeader>\n        \n        {/* Progress Indicator */}\n        <div className=\"space-y-4 mb-6\">\n          <Progress value={(currentStep / 4) * 100} className=\"h-2\" />\n          <div className=\"flex justify-between\">\n            {steps.map((step) => (\n              <div key={step.number} className=\"flex flex-col items-center\">\n                <div \n                  className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold border-2 ${\n                    currentStep >= step.number \n                      ? 'progress-step active' \n                      : 'border-border bg-background'\n                  }`}\n                >\n                  {step.number}\n                </div>\n                <span className=\"text-xs mt-1 text-center\">{step.title}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Step 1: Education Level */}\n            {currentStep === 1 && (\n              <FormField\n                control={form.control}\n                name=\"educationLevel\"\n                render={({ field }) => (\n                  <FormItem data-testid=\"education-level-step\">\n                    <FormLabel className=\"text-xl font-semibold\">What's your current education level?</FormLabel>\n                    <FormControl>\n                      <RadioGroup \n                        onValueChange={field.onChange} \n                        defaultValue={field.value}\n                        className=\"grid md:grid-cols-2 gap-4\"\n                      >\n                        <div className=\"flex items-center p-4 border border-border rounded-lg hover:bg-muted transition-colors\">\n                          <RadioGroupItem value=\"pre-matric\" id=\"pre-matric\" className=\"mr-3\" />\n                          <div>\n                            <label htmlFor=\"pre-matric\" className=\"font-medium cursor-pointer\">Pre-Matric</label>\n                            <div className=\"text-sm text-muted-foreground\">Classes 1-10</div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center p-4 border border-border rounded-lg hover:bg-muted transition-colors\">\n                          <RadioGroupItem value=\"post-matric\" id=\"post-matric\" className=\"mr-3\" />\n                          <div>\n                            <label htmlFor=\"post-matric\" className=\"font-medium cursor-pointer\">Post-Matric</label>\n                            <div className=\"text-sm text-muted-foreground\">Class 11+</div>\n                          </div>\n                        </div>\n                      </RadioGroup>\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            )}\n\n            {/* Step 2: Caste Category */}\n            {currentStep === 2 && (\n              <FormField\n                control={form.control}\n                name=\"casteCategory\"\n                render={({ field }) => (\n                  <FormItem data-testid=\"caste-category-step\">\n                    <FormLabel className=\"text-xl font-semibold\">Select your category</FormLabel>\n                    <FormControl>\n                      <RadioGroup \n                        onValueChange={field.onChange} \n                        defaultValue={field.value}\n                        className=\"grid md:grid-cols-2 gap-4\"\n                      >\n                        {[\n                          { value: \"general\", label: \"General\" },\n                          { value: \"obc\", label: \"OBC (Other Backward Class)\" },\n                          { value: \"sc\", label: \"SC (Scheduled Caste)\" },\n                          { value: \"st\", label: \"ST (Scheduled Tribe)\" }\n                        ].map((option) => (\n                          <div key={option.value} className=\"flex items-center p-4 border border-border rounded-lg hover:bg-muted transition-colors\">\n                            <RadioGroupItem value={option.value} id={option.value} className=\"mr-3\" />\n                            <label htmlFor={option.value} className=\"font-medium cursor-pointer\">{option.label}</label>\n                          </div>\n                        ))}\n                      </RadioGroup>\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            )}\n\n            {/* Step 3: Income Level */}\n            {currentStep === 3 && (\n              <FormField\n                control={form.control}\n                name=\"incomeLevel\"\n                render={({ field }) => (\n                  <FormItem data-testid=\"income-level-step\">\n                    <FormLabel className=\"text-xl font-semibold\">What's your family's annual income?</FormLabel>\n                    <FormControl>\n                      <RadioGroup \n                        onValueChange={field.onChange} \n                        defaultValue={field.value}\n                        className=\"grid md:grid-cols-2 gap-4\"\n                      >\n                        {[\n                          { value: \"below-1-lakh\", label: \"Below ₹1 Lakh\" },\n                          { value: \"1-2-lakh\", label: \"₹1-2 Lakh\" },\n                          { value: \"2-5-lakh\", label: \"₹2-5 Lakh\" },\n                          { value: \"above-5-lakh\", label: \"Above ₹5 Lakh\" }\n                        ].map((option) => (\n                          <div key={option.value} className=\"flex items-center p-4 border border-border rounded-lg hover:bg-muted transition-colors\">\n                            <RadioGroupItem value={option.value} id={option.value} className=\"mr-3\" />\n                            <label htmlFor={option.value} className=\"font-medium cursor-pointer\">{option.label}</label>\n                          </div>\n                        ))}\n                      </RadioGroup>\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            )}\n\n            {/* Step 4: State */}\n            {currentStep === 4 && (\n              <FormField\n                control={form.control}\n                name=\"state\"\n                render={({ field }) => (\n                  <FormItem data-testid=\"state-step\">\n                    <FormLabel className=\"text-xl font-semibold\">Select your state</FormLabel>\n                    <FormControl>\n                      <RadioGroup \n                        onValueChange={field.onChange} \n                        defaultValue={field.value}\n                        className=\"grid md:grid-cols-2 gap-4\"\n                      >\n                        {[\n                          \"Bihar\", \"Jharkhand\", \"West Bengal\", \"Uttar Pradesh\", \n                          \"Odisha\", \"Assam\", \"Other\"\n                        ].map((state) => (\n                          <div key={state} className=\"flex items-center p-4 border border-border rounded-lg hover:bg-muted transition-colors\">\n                            <RadioGroupItem value={state.toLowerCase()} id={state} className=\"mr-3\" />\n                            <label htmlFor={state} className=\"font-medium cursor-pointer\">{state}</label>\n                          </div>\n                        ))}\n                      </RadioGroup>\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            )}\n\n            {/* Navigation Buttons */}\n            <div className=\"flex justify-between\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={prevStep}\n                disabled={currentStep === 1}\n                data-testid=\"wizard-prev-button\"\n              >\n                <ArrowLeft className=\"mr-2\" size={16} />\n                {t('previousStep')}\n              </Button>\n              \n              {currentStep < 4 ? (\n                <Button \n                  type=\"button\" \n                  onClick={nextStep}\n                  data-testid=\"wizard-next-button\"\n                >\n                  {t('nextStep')}\n                  <ArrowRight className=\"ml-2\" size={16} />\n                </Button>\n              ) : (\n                <Button \n                  type=\"submit\" \n                  disabled={eligibilityMutation.isPending}\n                  data-testid=\"wizard-submit-button\"\n                >\n                  {eligibilityMutation.isPending ? \"Checking...\" : \"Check Eligibility\"}\n                </Button>\n              )}\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":14087},"client/src/components/footer.tsx":{"content":"import { GraduationCap, Facebook, Twitter, Youtube, MessageSquare } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { type Language, useTranslation } from \"@/lib/i18n\";\n\ninterface FooterProps {\n  language: Language;\n}\n\nexport default function Footer({ language }: FooterProps) {\n  const t = useTranslation(language);\n\n  const footerLinks = {\n    quickLinks: [\n      { name: \"Eligibility Wizard\", href: \"#eligibility\" },\n      { name: \"DBT Simulator\", href: \"#dbt-simulator\" },\n      { name: \"Help Centers\", href: \"#help-centers\" },\n      { name: \"Learning Games\", href: \"#learning\" }\n    ],\n    resources: [\n      { name: \"Video Tutorials\", href: \"#videos\" },\n      { name: \"Parent Toolkit\", href: \"#toolkit\" },\n      { name: \"FAQs\", href: \"#faq\" },\n      { name: \"Success Stories\", href: \"#stories\" }\n    ],\n    support: [\n      { name: \"Contact Us\", href: \"#contact\" },\n      { name: \"Help Center\", href: \"#help\" },\n      { name: \"Technical Support\", href: \"#support\" },\n      { name: \"Feedback\", href: \"#feedback\" }\n    ],\n    legal: [\n      { name: \"Privacy Policy\", href: \"#privacy\" },\n      { name: \"Terms of Service\", href: \"#terms\" },\n      { name: \"Disclaimer\", href: \"#disclaimer\" },\n      { name: \"Accessibility\", href: \"#accessibility\" }\n    ]\n  };\n\n  const socialLinks = [\n    { name: \"Facebook\", icon: Facebook, href: \"https://facebook.com\", color: \"text-blue-600\" },\n    { name: \"Twitter\", icon: Twitter, href: \"https://twitter.com\", color: \"text-blue-400\" },\n    { name: \"YouTube\", icon: Youtube, href: \"https://youtube.com\", color: \"text-red-600\" },\n    { name: \"WhatsApp\", icon: MessageSquare, href: \"https://wa.me\", color: \"text-green-600\" }\n  ];\n\n  return (\n    <footer className=\"bg-primary text-primary-foreground py-12\" data-testid=\"footer\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid md:grid-cols-5 gap-8\">\n          {/* Brand Section */}\n          <div className=\"md:col-span-1\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <GraduationCap className=\"text-2xl text-accent\" size={32} />\n              <h4 className=\"text-xl font-bold\">{t('title')}</h4>\n            </div>\n            <p className=\"opacity-80 mb-6 text-sm\">\n              Empowering students to access their rightful scholarships through technology and education.\n            </p>\n            <div className=\"flex space-x-3\">\n              {socialLinks.map((social) => (\n                <Button\n                  key={social.name}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-accent hover:text-accent/80 p-2\"\n                  asChild\n                  data-testid={`social-${social.name.toLowerCase()}`}\n                >\n                  <a href={social.href} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <social.icon size={20} />\n                  </a>\n                </Button>\n              ))}\n            </div>\n          </div>\n          \n          {/* Quick Links */}\n          <div>\n            <h5 className=\"font-semibold mb-4\">Quick Links</h5>\n            <ul className=\"space-y-2 opacity-80\">\n              {footerLinks.quickLinks.map((link) => (\n                <li key={link.name}>\n                  <a \n                    href={link.href} \n                    className=\"hover:text-accent transition-colors text-sm\"\n                    data-testid={`footer-link-${link.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    {link.name}\n                  </a>\n                </li>\n              ))}\n            </ul>\n          </div>\n          \n          {/* Resources */}\n          <div>\n            <h5 className=\"font-semibold mb-4\">Resources</h5>\n            <ul className=\"space-y-2 opacity-80\">\n              {footerLinks.resources.map((link) => (\n                <li key={link.name}>\n                  <a \n                    href={link.href} \n                    className=\"hover:text-accent transition-colors text-sm\"\n                    data-testid={`footer-resource-${link.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    {link.name}\n                  </a>\n                </li>\n              ))}\n            </ul>\n          </div>\n          \n          {/* Support */}\n          <div>\n            <h5 className=\"font-semibold mb-4\">Support</h5>\n            <ul className=\"space-y-2 opacity-80\">\n              {footerLinks.support.map((link) => (\n                <li key={link.name}>\n                  <a \n                    href={link.href} \n                    className=\"hover:text-accent transition-colors text-sm\"\n                    data-testid={`footer-support-${link.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    {link.name}\n                  </a>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Government Information */}\n          <div>\n            <h5 className=\"font-semibold mb-4\">Official</h5>\n            <div className=\"space-y-3\">\n              <div className=\"bg-white/10 rounded-lg p-3\">\n                <div className=\"text-sm font-medium mb-1\">Helpline</div>\n                <div className=\"text-accent font-mono\">1800-XXX-XXXX</div>\n              </div>\n              <div className=\"bg-white/10 rounded-lg p-3\">\n                <div className=\"text-sm font-medium mb-1\">Email Support</div>\n                <div className=\"text-accent text-sm\">help@scholarshiphero.gov.in</div>\n              </div>\n              <div className=\"text-xs opacity-70\">\n                Ministry of Social Justice & Empowerment<br />\n                Government of India\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Bottom Section */}\n        <div className=\"border-t border-primary-foreground/20 mt-8 pt-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n            <div className=\"text-center md:text-left opacity-80 text-sm\">\n              <p>&copy; 2024 Scholarship Hero. All rights reserved.</p>\n              <p className=\"mt-1\">A Government of India Initiative under Digital India</p>\n            </div>\n            \n            <div className=\"flex flex-wrap gap-4 text-xs opacity-70\">\n              {footerLinks.legal.map((link) => (\n                <a \n                  key={link.name}\n                  href={link.href} \n                  className=\"hover:text-accent transition-colors\"\n                  data-testid={`footer-legal-${link.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  {link.name}\n                </a>\n              ))}\n            </div>\n          </div>\n          \n          {/* Accessibility Statement */}\n          <div className=\"mt-6 text-center\">\n            <div className=\"bg-white/10 rounded-lg p-4 text-sm\">\n              <div className=\"flex items-center justify-center gap-2 mb-2\">\n                <span className=\"text-accent\">♿</span>\n                <span className=\"font-medium\">Accessibility Commitment</span>\n              </div>\n              <p className=\"opacity-80\">\n                This platform is designed to be accessible to all users, including those with disabilities. \n                We support screen readers, keyboard navigation, and high contrast modes.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":7470},"client/src/components/gamified-learning.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trophy, Star, CheckCircle, XCircle } from \"lucide-react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type Language, useTranslation } from \"@/lib/i18n\";\n\ninterface GamifiedLearningProps {\n  isOpen: boolean;\n  onClose: () => void;\n  language: Language;\n}\n\ninterface Question {\n  id: number;\n  question: string;\n  options: string[];\n  correctAnswer: number;\n  explanation: string;\n}\n\nconst quizQuestions: Question[] = [\n  {\n    id: 1,\n    question: \"What is the difference between Aadhaar-linked and DBT-enabled bank accounts?\",\n    options: [\n      \"There is no difference, they are the same\",\n      \"Aadhaar-linked means Aadhaar is connected to account, DBT-enabled means it can receive government transfers\",\n      \"DBT-enabled accounts are only for rich people\",\n      \"Aadhaar-linked accounts cannot receive money\"\n    ],\n    correctAnswer: 1,\n    explanation: \"Aadhaar-linked means your Aadhaar is connected to your bank account. DBT-enabled means the account is specifically configured to receive Direct Benefit Transfers from the government.\"\n  },\n  {\n    id: 2,\n    question: \"What should you do if your scholarship money is delayed?\",\n    options: [\n      \"Wait forever without doing anything\",\n      \"Check DBT seeding status and contact bank if needed\",\n      \"Apply for another scholarship immediately\",\n      \"Complain on social media only\"\n    ],\n    correctAnswer: 1,\n    explanation: \"First check your DBT seeding status. If properly seeded, contact your bank to verify account details. You can also track status on government portals.\"\n  },\n  {\n    id: 3,\n    question: \"Which document is most important for scholarship applications?\",\n    options: [\n      \"Voter ID only\",\n      \"Aadhaar card and bank account details\",\n      \"Driving license\",\n      \"Birth certificate only\"\n    ],\n    correctAnswer: 1,\n    explanation: \"Aadhaar card and bank account details are essential for most scholarships as they enable DBT transfers and identity verification.\"\n  },\n  {\n    id: 4,\n    question: \"How often should you check your scholarship application status?\",\n    options: [\n      \"Never check, it will come automatically\",\n      \"Once every few weeks during processing period\",\n      \"Every hour\",\n      \"Only after one year\"\n    ],\n    correctAnswer: 1,\n    explanation: \"Regular checking (every few weeks) helps you stay informed about your application status and take action if needed.\"\n  },\n  {\n    id: 5,\n    question: \"What is the best way to ensure you don't miss scholarship deadlines?\",\n    options: [\n      \"Remember everything in your head\",\n      \"Set calendar reminders and subscribe to notifications\",\n      \"Ask friends to remind you\",\n      \"Check once a year\"\n    ],\n    correctAnswer: 1,\n    explanation: \"Setting calendar reminders and subscribing to official notifications (like WhatsApp updates) ensures you never miss important deadlines.\"\n  }\n];\n\nexport default function GamifiedLearning({ isOpen, onClose, language }: GamifiedLearningProps) {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);\n  const [isAnswered, setIsAnswered] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isQuizComplete, setIsQuizComplete] = useState(false);\n  const [showExplanation, setShowExplanation] = useState(false);\n  const t = useTranslation(language);\n  const { toast } = useToast();\n\n  const userId = \"guest\"; // In real app, get from auth context\n\n  const { data: gamificationData } = useQuery({\n    queryKey: ['/api/gamification', userId],\n    enabled: isOpen\n  });\n\n  const scoreMutation = useMutation({\n    mutationFn: async (data: { userId: string; score: number; quizType: string }) => {\n      const response = await apiRequest('POST', '/api/quiz-score', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Progress Saved!\",\n        description: `Earned ${data.progress?.totalPoints || 0} total points`,\n      });\n    }\n  });\n\n  const handleAnswerSelect = (answerIndex: number) => {\n    if (isAnswered) return;\n    \n    setSelectedAnswer(answerIndex);\n    setIsAnswered(true);\n    setShowExplanation(true);\n    \n    if (answerIndex === quizQuestions[currentQuestion].correctAnswer) {\n      setScore(score + 20);\n    }\n  };\n\n  const handleNextQuestion = () => {\n    if (currentQuestion < quizQuestions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n      setSelectedAnswer(null);\n      setIsAnswered(false);\n      setShowExplanation(false);\n    } else {\n      setIsQuizComplete(true);\n      // Save score to backend\n      scoreMutation.mutate({\n        userId,\n        score,\n        quizType: \"aadhaar_basics\"\n      });\n    }\n  };\n\n  const resetQuiz = () => {\n    setCurrentQuestion(0);\n    setSelectedAnswer(null);\n    setIsAnswered(false);\n    setScore(0);\n    setIsQuizComplete(false);\n    setShowExplanation(false);\n  };\n\n  const getScoreMessage = () => {\n    const percentage = (score / (quizQuestions.length * 20)) * 100;\n    if (percentage >= 80) return \"Excellent! You're an Aadhaar expert! 🏆\";\n    if (percentage >= 60) return \"Good job! You understand the basics well! 👍\";\n    if (percentage >= 40) return \"Not bad! Review the concepts and try again! 📚\";\n    return \"Keep learning! Practice makes perfect! 💪\";\n  };\n\n  const getBadgeLevel = () => {\n    const percentage = (score / (quizQuestions.length * 20)) * 100;\n    if (percentage >= 80) return \"Expert\";\n    if (percentage >= 60) return \"Proficient\";\n    if (percentage >= 40) return \"Learner\";\n    return \"Beginner\";\n  };\n\n  if (isQuizComplete) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"quiz-complete\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Trophy className=\"text-yellow-500\" />\n              Quiz Complete!\n            </DialogTitle>\n          </DialogHeader>\n\n          <div className=\"text-center space-y-6\">\n            <div className=\"bg-primary/10 rounded-lg p-6\">\n              <div className=\"text-4xl font-bold text-primary mb-2\">{score}/100</div>\n              <p className=\"text-lg\">{getScoreMessage()}</p>\n            </div>\n\n            <div className=\"grid md:grid-cols-3 gap-4\">\n              <Card>\n                <CardContent className=\"pt-6 text-center\">\n                  <Star className=\"mx-auto mb-2 text-yellow-500\" size={32} />\n                  <div className=\"font-semibold\">Your Badge</div>\n                  <Badge variant=\"secondary\" className=\"mt-2\">\n                    {getBadgeLevel()}\n                  </Badge>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"pt-6 text-center\">\n                  <CheckCircle className=\"mx-auto mb-2 text-green-500\" size={32} />\n                  <div className=\"font-semibold\">Correct Answers</div>\n                  <div className=\"text-2xl font-bold\">{score / 20}/5</div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"pt-6 text-center\">\n                  <Trophy className=\"mx-auto mb-2 text-accent\" size={32} />\n                  <div className=\"font-semibold\">Total Points</div>\n                  <div className=\"text-2xl font-bold\">{(gamificationData as any)?.totalPoints || 0}</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"flex gap-4 justify-center\">\n              <Button onClick={resetQuiz} variant=\"outline\" data-testid=\"retry-quiz-button\">\n                Try Again\n              </Button>\n              <Button onClick={onClose} data-testid=\"close-quiz-button\">\n                Close\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"gamified-learning\">\n        <DialogHeader>\n          <DialogTitle>Scholarship Knowledge Quiz</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Progress */}\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Question {currentQuestion + 1} of {quizQuestions.length}</span>\n              <span>Score: {score}/100</span>\n            </div>\n            <Progress value={((currentQuestion + 1) / quizQuestions.length) * 100} />\n          </div>\n\n          {/* Question */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">\n                {quizQuestions[currentQuestion].question}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {quizQuestions[currentQuestion].options.map((option, index) => (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  className={`w-full text-left justify-start h-auto p-4 ${\n                    selectedAnswer === index\n                      ? index === quizQuestions[currentQuestion].correctAnswer\n                        ? \"bg-green-100 border-green-500 text-green-700\"\n                        : \"bg-red-100 border-red-500 text-red-700\"\n                      : isAnswered && index === quizQuestions[currentQuestion].correctAnswer\n                      ? \"bg-green-100 border-green-500 text-green-700\"\n                      : \"\"\n                  }`}\n                  onClick={() => handleAnswerSelect(index)}\n                  disabled={isAnswered}\n                  data-testid={`answer-option-${index}`}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    {isAnswered && (\n                      selectedAnswer === index ? (\n                        index === quizQuestions[currentQuestion].correctAnswer ? (\n                          <CheckCircle size={16} className=\"text-green-600\" />\n                        ) : (\n                          <XCircle size={16} className=\"text-red-600\" />\n                        )\n                      ) : index === quizQuestions[currentQuestion].correctAnswer ? (\n                        <CheckCircle size={16} className=\"text-green-600\" />\n                      ) : null\n                    )}\n                    <span>{option}</span>\n                  </div>\n                </Button>\n              ))}\n            </CardContent>\n          </Card>\n\n          {/* Explanation */}\n          {showExplanation && (\n            <Card className=\"bg-muted\">\n              <CardContent className=\"pt-4\">\n                <h4 className=\"font-semibold mb-2\">Explanation:</h4>\n                <p className=\"text-sm\">{quizQuestions[currentQuestion].explanation}</p>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Navigation */}\n          <div className=\"flex justify-between\">\n            <div className=\"text-sm text-muted-foreground\">\n              {isAnswered ? (\n                selectedAnswer === quizQuestions[currentQuestion].correctAnswer ? (\n                  <span className=\"text-green-600\">✅ Correct! +20 points</span>\n                ) : (\n                  <span className=\"text-red-600\">❌ Incorrect! +0 points</span>\n                )\n              ) : (\n                \"Select an answer to continue\"\n              )}\n            </div>\n            \n            <Button\n              onClick={handleNextQuestion}\n              disabled={!isAnswered}\n              data-testid=\"next-question-button\"\n            >\n              {currentQuestion < quizQuestions.length - 1 ? \"Next Question\" : \"Finish Quiz\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12319},"client/src/components/header.tsx":{"content":"import { useState } from \"react\";\nimport { GraduationCap, Mic, Volume2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport LanguageToggle from \"./language-toggle\";\nimport VoiceAssistant from \"./voice-assistant\";\nimport { useTranslation, type Language } from \"@/lib/i18n\";\n\ninterface HeaderProps {\n  language: Language;\n  onLanguageChange: (lang: Language) => void;\n}\n\nexport default function Header({ language, onLanguageChange }: HeaderProps) {\n  const [isVoiceActive, setIsVoiceActive] = useState(false);\n  const t = useTranslation(language);\n\n  const handleVoiceToggle = () => {\n    setIsVoiceActive(!isVoiceActive);\n  };\n\n  return (\n    <>\n      <header className=\"bg-primary text-primary-foreground shadow-lg sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <nav className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <GraduationCap className=\"text-2xl text-accent\" size={32} />\n              <h1 className=\"text-xl font-bold\" data-testid=\"header-title\">\n                {t('title')}\n              </h1>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <LanguageToggle \n                currentLanguage={language}\n                onLanguageChange={onLanguageChange}\n              />\n              \n              <Button\n                variant=\"secondary\"\n                onClick={handleVoiceToggle}\n                className=\"bg-accent hover:bg-accent/80 text-accent-foreground\"\n                data-testid=\"voice-assistant-toggle\"\n              >\n                {isVoiceActive ? <Volume2 className=\"mr-2\" size={16} /> : <Mic className=\"mr-2\" size={16} />}\n                <span className=\"hidden sm:inline\">{t('voiceHelp')}</span>\n              </Button>\n            </div>\n          </nav>\n        </div>\n      </header>\n\n      <VoiceAssistant isActive={isVoiceActive} language={language} />\n    </>\n  );\n}\n","size_bytes":1996},"client/src/components/help-center-map.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { MapPin, Phone, Clock, Navigation } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { type Language } from \"@/lib/i18n\";\nimport { type HelpCenter } from \"@shared/schema\";\n\ninterface HelpCenterMapProps {\n  isOpen: boolean;\n  onClose: () => void;\n  language: Language;\n}\n\nexport default function HelpCenterMap({ isOpen, onClose, language }: HelpCenterMapProps) {\n  const [pincode, setPincode] = useState(\"\");\n  const [serviceType, setServiceType] = useState<string>(\"all\");\n  const [userLocation, setUserLocation] = useState<{lat: number, lng: number} | null>(null);\n\n  const { data: helpCenters, isLoading, refetch } = useQuery({\n    queryKey: ['/api/help-centers', pincode, serviceType === 'all' ? undefined : serviceType],\n    enabled: false // Only fetch when user searches\n  });\n\n  useEffect(() => {\n    // Try to get user's location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setUserLocation({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n        },\n        (error) => {\n          console.log(\"Location access denied:\", error);\n        }\n      );\n    }\n  }, []);\n\n  const handleSearch = () => {\n    if (pincode) {\n      refetch();\n    }\n  };\n\n  const calculateDistance = (center: HelpCenter): string => {\n    if (!userLocation || !center.latitude || !center.longitude) {\n      return \"Distance unknown\";\n    }\n\n    const lat1 = userLocation.lat;\n    const lon1 = userLocation.lng;\n    const lat2 = parseFloat(center.latitude);\n    const lon2 = parseFloat(center.longitude);\n\n    const R = 6371; // Earth's radius in km\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n              Math.sin(dLon/2) * Math.sin(dLon/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    const distance = R * c;\n\n    return `${distance.toFixed(1)} km away`;\n  };\n\n  const getDirections = (center: HelpCenter) => {\n    if (center.latitude && center.longitude) {\n      const url = `https://www.google.com/maps/dir/?api=1&destination=${center.latitude},${center.longitude}`;\n      window.open(url, '_blank');\n    }\n  };\n\n  const getCenterTypeIcon = (type: string) => {\n    switch (type) {\n      case 'bank':\n        return '🏦';\n      case 'csc':\n        return '💻';\n      case 'uidai':\n        return '🆔';\n      default:\n        return '📍';\n    }\n  };\n\n  const getCenterTypeName = (type: string) => {\n    switch (type) {\n      case 'bank':\n        return 'Bank Branch';\n      case 'csc':\n        return 'CSC Center';\n      case 'uidai':\n        return 'UIDAI Office';\n      default:\n        return 'Help Center';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\" data-testid=\"help-center-map\">\n        <DialogHeader>\n          <DialogTitle>Find Nearby Help Centers</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          {/* Search Panel */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"pincode\">Enter your location</Label>\n              <Input\n                id=\"pincode\"\n                value={pincode}\n                onChange={(e) => setPincode(e.target.value)}\n                placeholder=\"Pin code or city\"\n                data-testid=\"location-input\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"service\">Service needed</Label>\n              <Select value={serviceType} onValueChange={setServiceType}>\n                <SelectTrigger data-testid=\"service-select\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Services</SelectItem>\n                  <SelectItem value=\"bank\">Banking Services</SelectItem>\n                  <SelectItem value=\"csc\">CSC Services</SelectItem>\n                  <SelectItem value=\"uidai\">Aadhaar Services</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <Button \n              onClick={handleSearch} \n              className=\"w-full\"\n              disabled={!pincode || isLoading}\n              data-testid=\"search-centers-button\"\n            >\n              {isLoading ? \"Searching...\" : \"Find Centers\"}\n            </Button>\n            \n            {/* Results List */}\n            <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n              {(helpCenters as HelpCenter[])?.map((center: HelpCenter) => (\n                <Card key={center.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm flex items-start gap-2\">\n                      <span className=\"text-lg\">{getCenterTypeIcon(center.type)}</span>\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium\">{center.name}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {getCenterTypeName(center.type)}\n                        </div>\n                      </div>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0 space-y-2\">\n                    <div className=\"flex items-start gap-2 text-xs text-muted-foreground\">\n                      <MapPin size={12} className=\"mt-0.5\" />\n                      <span>{center.address}</span>\n                    </div>\n                    \n                    {center.phoneNumber && (\n                      <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                        <Phone size={12} />\n                        <span>{center.phoneNumber}</span>\n                      </div>\n                    )}\n                    \n                    <div className=\"flex items-center gap-2 text-xs text-accent\">\n                      <Navigation size={12} />\n                      <span>{calculateDistance(center)}</span>\n                    </div>\n                    \n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => getDirections(center)}\n                      className=\"w-full text-xs\"\n                      data-testid={`directions-button-${center.id}`}\n                    >\n                      Get Directions\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n              \n              {helpCenters && (helpCenters as HelpCenter[]).length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <MapPin className=\"mx-auto mb-2\" size={32} />\n                  <p>No centers found in this area</p>\n                  <p className=\"text-sm\">Try a different pin code</p>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          {/* Map Placeholder */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-muted rounded-lg h-96 flex items-center justify-center border-2 border-dashed border-border\">\n              <div className=\"text-center\">\n                <MapPin className=\"mx-auto mb-4 text-muted-foreground\" size={48} />\n                <p className=\"text-muted-foreground text-lg font-medium\">Interactive Map</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Map integration with Google Maps API\n                </p>\n                <p className=\"text-xs text-muted-foreground mt-4\">\n                  In production: Real-time locations with navigation\n                </p>\n              </div>\n            </div>\n            \n            {/* Map Legend */}\n            <div className=\"mt-4 flex flex-wrap gap-4 text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <span>🏦</span>\n                <span>Bank Branches</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span>💻</span>\n                <span>CSC Centers</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span>🆔</span>\n                <span>UIDAI Offices</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9110},"client/src/components/language-toggle.tsx":{"content":"import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { type Language } from \"@/lib/i18n\";\n\ninterface LanguageToggleProps {\n  currentLanguage: Language;\n  onLanguageChange: (language: Language) => void;\n}\n\nexport default function LanguageToggle({ currentLanguage, onLanguageChange }: LanguageToggleProps) {\n  const languages = [\n    { code: 'en' as Language, name: 'English', native: 'English' },\n    { code: 'hi' as Language, name: 'Hindi', native: 'हिंदी' },\n    { code: 'mai' as Language, name: 'Maithili', native: 'मैथिली' },\n    { code: 'bho' as Language, name: 'Bhojpuri', native: 'भोजपुरी' }\n  ];\n\n  return (\n    <Select value={currentLanguage} onValueChange={onLanguageChange}>\n      <SelectTrigger \n        className=\"w-32 bg-primary-foreground text-primary border-border\"\n        data-testid=\"language-select\"\n      >\n        <SelectValue />\n      </SelectTrigger>\n      <SelectContent>\n        {languages.map((lang) => (\n          <SelectItem \n            key={lang.code} \n            value={lang.code}\n            data-testid={`language-option-${lang.code}`}\n          >\n            {lang.native}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n","size_bytes":1282},"client/src/components/parent-toolkit.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Download, FileText, Image, Presentation, Users, BookOpen, FileCheck } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type Language, useTranslation } from \"@/lib/i18n\";\n\ninterface ParentToolkitProps {\n  isOpen: boolean;\n  onClose: () => void;\n  language: Language;\n}\n\ninterface Resource {\n  id: string;\n  title: string;\n  description: string;\n  type: 'pdf' | 'image' | 'presentation' | 'template';\n  category: 'poster' | 'guide' | 'checklist' | 'presentation';\n  language: Language[];\n  fileSize: string;\n  downloadUrl: string;\n}\n\nconst resources: Resource[] = [\n  {\n    id: \"aadhaar-seeding-poster\",\n    title: \"Aadhaar Seeding Awareness Poster\",\n    description: \"Colorful poster explaining the difference between Aadhaar-linked and DBT-enabled accounts\",\n    type: \"image\",\n    category: \"poster\",\n    language: [\"en\", \"hi\", \"mai\", \"bho\"],\n    fileSize: \"2.5 MB\",\n    downloadUrl: \"/api/download/poster-aadhaar-seeding\"\n  },\n  {\n    id: \"scholarship-checklist\",\n    title: \"Scholarship Application Checklist\",\n    description: \"Step-by-step checklist for students and parents to ensure complete application\",\n    type: \"pdf\",\n    category: \"checklist\",\n    language: [\"en\", \"hi\"],\n    fileSize: \"1.2 MB\",\n    downloadUrl: \"/api/download/checklist-scholarship\"\n  },\n  {\n    id: \"pta-presentation\",\n    title: \"PTA Meeting Presentation\",\n    description: \"Ready-to-use PowerPoint presentation for parent-teacher meetings about scholarships\",\n    type: \"presentation\",\n    category: \"presentation\",\n    language: [\"en\", \"hi\"],\n    fileSize: \"8.7 MB\",\n    downloadUrl: \"/api/download/presentation-pta\"\n  },\n  {\n    id: \"dbt-guide\",\n    title: \"DBT Process Complete Guide\",\n    description: \"Comprehensive guide explaining DBT, account seeding, and troubleshooting\",\n    type: \"pdf\",\n    category: \"guide\",\n    language: [\"en\", \"hi\", \"mai\", \"bho\"],\n    fileSize: \"5.4 MB\",\n    downloadUrl: \"/api/download/guide-dbt\"\n  },\n  {\n    id: \"bank-visit-template\",\n    title: \"Bank Visit Preparation Template\",\n    description: \"Editable template with questions to ask and documents to carry when visiting bank\",\n    type: \"template\",\n    category: \"checklist\",\n    language: [\"en\", \"hi\"],\n    fileSize: \"0.8 MB\",\n    downloadUrl: \"/api/download/template-bank-visit\"\n  },\n  {\n    id: \"scholarship-timeline-poster\",\n    title: \"Annual Scholarship Timeline Poster\",\n    description: \"Visual timeline showing key scholarship dates throughout the academic year\",\n    type: \"image\",\n    category: \"poster\",\n    language: [\"en\", \"hi\"],\n    fileSize: \"3.1 MB\",\n    downloadUrl: \"/api/download/poster-timeline\"\n  },\n  {\n    id: \"discussion-guide\",\n    title: \"Community Discussion Guide\",\n    description: \"Guide for conducting awareness sessions in villages and communities\",\n    type: \"pdf\",\n    category: \"guide\",\n    language: [\"en\", \"hi\", \"mai\", \"bho\"],\n    fileSize: \"2.8 MB\",\n    downloadUrl: \"/api/download/guide-discussion\"\n  },\n  {\n    id: \"quick-reference-card\",\n    title: \"Quick Reference Card\",\n    description: \"Printable pocket-sized card with key scholarship information and helpline numbers\",\n    type: \"pdf\",\n    category: \"checklist\",\n    language: [\"en\", \"hi\", \"mai\", \"bho\"],\n    fileSize: \"0.5 MB\",\n    downloadUrl: \"/api/download/card-reference\"\n  }\n];\n\nexport default function ParentToolkit({ isOpen, onClose, language }: ParentToolkitProps) {\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [downloadStats, setDownloadStats] = useState<Record<string, number>>({});\n  const t = useTranslation(language);\n  const { toast } = useToast();\n\n  const handleDownload = (resource: Resource) => {\n    // Simulate download\n    toast({\n      title: \"Download Started\",\n      description: `Downloading ${resource.title}...`,\n    });\n    \n    // Update download stats\n    setDownloadStats(prev => ({\n      ...prev,\n      [resource.id]: (prev[resource.id] || 0) + 1\n    }));\n\n    // In a real implementation, this would trigger the actual file download\n    // For now, we'll just show a success message after a delay\n    setTimeout(() => {\n      toast({\n        title: \"Download Complete\",\n        description: `${resource.title} has been downloaded successfully.`,\n      });\n    }, 2000);\n  };\n\n  const getResourceIcon = (type: string) => {\n    switch (type) {\n      case 'pdf':\n        return <FileText className=\"text-red-500\" size={20} />;\n      case 'image':\n        return <Image className=\"text-blue-500\" size={20} />;\n      case 'presentation':\n        return <Presentation className=\"text-orange-500\" size={20} />;\n      case 'template':\n        return <FileCheck className=\"text-green-500\" size={20} />;\n      default:\n        return <FileText className=\"text-gray-500\" size={20} />;\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'poster':\n        return <Image size={16} />;\n      case 'guide':\n        return <BookOpen size={16} />;\n      case 'checklist':\n        return <FileCheck size={16} />;\n      case 'presentation':\n        return <Presentation size={16} />;\n      default:\n        return <FileText size={16} />;\n    }\n  };\n\n  const filteredResources = resources.filter(resource => \n    selectedCategory === \"all\" || resource.category === selectedCategory\n  );\n\n  const categories = [\n    { id: \"all\", name: \"All Resources\", count: resources.length },\n    { id: \"poster\", name: \"Posters\", count: resources.filter(r => r.category === \"poster\").length },\n    { id: \"guide\", name: \"Guides\", count: resources.filter(r => r.category === \"guide\").length },\n    { id: \"checklist\", name: \"Checklists\", count: resources.filter(r => r.category === \"checklist\").length },\n    { id: \"presentation\", name: \"Presentations\", count: resources.filter(r => r.category === \"presentation\").length }\n  ];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-5xl max-h-[90vh] overflow-y-auto\" data-testid=\"parent-toolkit\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Users className=\"text-green-600\" />\n            Parent-Teacher Toolkit\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Introduction */}\n          <Card className=\"bg-green-50 border-green-200\">\n            <CardContent className=\"pt-6\">\n              <h3 className=\"font-semibold mb-2\">📚 Empower Your Community</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Download these professionally designed materials to spread scholarship awareness in your school, \n                community, or PTA meetings. All resources are available in multiple languages and print-ready formats.\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Category Tabs */}\n          <Tabs value={selectedCategory} onValueChange={setSelectedCategory}>\n            <TabsList className=\"grid grid-cols-5 w-full\">\n              {categories.map((category) => (\n                <TabsTrigger \n                  key={category.id} \n                  value={category.id}\n                  className=\"flex items-center gap-1 text-xs\"\n                  data-testid={`category-${category.id}`}\n                >\n                  {getCategoryIcon(category.id)}\n                  <span className=\"hidden sm:inline\">{category.name}</span>\n                  <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n                    {category.count}\n                  </Badge>\n                </TabsTrigger>\n              ))}\n            </TabsList>\n\n            <TabsContent value={selectedCategory} className=\"mt-6\">\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredResources.map((resource) => (\n                  <Card key={resource.id} className=\"hover:shadow-md transition-shadow\">\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"flex items-start gap-3 text-base\">\n                        {getResourceIcon(resource.type)}\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium leading-tight\">{resource.title}</div>\n                          <div className=\"flex items-center gap-2 mt-2\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {resource.type.toUpperCase()}\n                            </Badge>\n                            <span className=\"text-xs text-muted-foreground\">{resource.fileSize}</span>\n                          </div>\n                        </div>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        {resource.description}\n                      </p>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"text-xs text-muted-foreground\">Available languages:</div>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {resource.language.map((lang) => (\n                            <Badge key={lang} variant=\"secondary\" className=\"text-xs\">\n                              {lang === 'en' ? 'English' : \n                               lang === 'hi' ? 'हिंदी' :\n                               lang === 'mai' ? 'मैथिली' : 'भोजपुरी'}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between pt-2\">\n                        <div className=\"text-xs text-muted-foreground\">\n                          {downloadStats[resource.id] ? \n                            `${downloadStats[resource.id]} downloads` : \n                            'Ready to download'\n                          }\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleDownload(resource)}\n                          className=\"bg-green-600 hover:bg-green-700 text-white\"\n                          data-testid={`download-${resource.id}`}\n                        >\n                          <Download className=\"mr-2\" size={14} />\n                          Download\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n          </Tabs>\n\n          {/* Usage Guidelines */}\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <CardHeader>\n              <CardTitle className=\"text-base\">📋 Usage Guidelines</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-sm space-y-2\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <h4 className=\"font-medium mb-2\">✅ Recommended Uses:</h4>\n                  <ul className=\"space-y-1 text-muted-foreground\">\n                    <li>• School notice boards and classrooms</li>\n                    <li>• PTA and parent meetings</li>\n                    <li>• Community awareness programs</li>\n                    <li>• Village panchayat meetings</li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-medium mb-2\">📝 Print Instructions:</h4>\n                  <ul className=\"space-y-1 text-muted-foreground\">\n                    <li>• Use high-quality paper (120+ GSM)</li>\n                    <li>• Print in color for maximum impact</li>\n                    <li>• A3 size recommended for posters</li>\n                    <li>• Regular A4 for guides and checklists</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <div className=\"flex flex-wrap gap-3\">\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                // Download all resources\n                filteredResources.forEach(resource => handleDownload(resource));\n              }}\n              data-testid=\"download-all-button\"\n            >\n              <Download className=\"mr-2\" size={16} />\n              Download All ({filteredResources.length})\n            </Button>\n            <Button \n              variant=\"outline\"\n              onClick={() => {\n                toast({\n                  title: \"Sharing Kit\",\n                  description: \"A shareable link has been copied to your clipboard!\",\n                });\n              }}\n              data-testid=\"share-toolkit-button\"\n            >\n              Share Toolkit\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":13325},"client/src/components/video-section.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, Eye, Share2, Clock, Globe } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type Language, useTranslation } from \"@/lib/i18n\";\n\ninterface VideoSectionProps {\n  language: Language;\n}\n\ninterface Video {\n  id: string;\n  title: string;\n  description: string;\n  duration: string;\n  views: string;\n  languages: string;\n  thumbnail: string;\n  embedUrl?: string;\n}\n\nconst videos: Video[] = [\n  {\n    id: \"aadhaar-seeding-guide\",\n    title: \"Complete Guide to Aadhaar Seeding\",\n    description: \"Learn how to seed your bank account with Aadhaar for seamless DBT transfers and scholarship payments.\",\n    duration: \"15 minutes\",\n    views: \"125,234 views\",\n    languages: \"Hindi & English\",\n    thumbnail: \"bg-primary\",\n    embedUrl: \"https://www.youtube.com/embed/dQw4w9WgXcQ\" // Demo URL\n  },\n  {\n    id: \"dbt-troubleshooting\",\n    title: \"Common DBT Issues & Solutions\",\n    description: \"Quick solutions for common issues faced during DBT verification and fund transfer processes.\",\n    duration: \"8 minutes\",\n    views: \"89,567 views\",\n    languages: \"Regional Languages\",\n    thumbnail: \"bg-secondary\",\n    embedUrl: \"https://www.youtube.com/embed/dQw4w9WgXcQ\" // Demo URL\n  },\n  {\n    id: \"scholarship-application\",\n    title: \"Step-by-Step Scholarship Application\",\n    description: \"Complete walkthrough of the online scholarship application process with tips and best practices.\",\n    duration: \"12 minutes\",\n    views: \"156,890 views\",\n    languages: \"Hindi & English\",\n    thumbnail: \"bg-accent\"\n  },\n  {\n    id: \"bank-account-setup\",\n    title: \"Setting Up Your First Bank Account\",\n    description: \"Everything students need to know about opening a bank account for scholarship purposes.\",\n    duration: \"10 minutes\",\n    views: \"67,432 views\",\n    languages: \"Multi-language\",\n    thumbnail: \"bg-purple-600\"\n  }\n];\n\nexport default function VideoSection({ language }: VideoSectionProps) {\n  const t = useTranslation(language);\n  const { toast } = useToast();\n\n  const handleShareVideo = (video: Video) => {\n    // Simulate sharing functionality\n    if (navigator.share) {\n      navigator.share({\n        title: video.title,\n        text: video.description,\n        url: window.location.href\n      }).catch(console.error);\n    } else {\n      // Fallback to copying link\n      navigator.clipboard.writeText(window.location.href).then(() => {\n        toast({\n          title: \"Link Copied\",\n          description: \"Video link has been copied to your clipboard!\",\n        });\n      });\n    }\n  };\n\n  const handlePlayVideo = (video: Video) => {\n    if (video.embedUrl) {\n      // In a real implementation, this would open a video modal or navigate to the video\n      toast({\n        title: \"Opening Video\",\n        description: `Loading ${video.title}...`,\n      });\n    } else {\n      toast({\n        title: \"Video Coming Soon\",\n        description: \"This video will be available shortly.\",\n      });\n    }\n  };\n\n  return (\n    <section className=\"py-16 bg-background\" data-testid=\"video-section\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h3 className=\"text-3xl font-bold mb-4\">Watch & Learn: DBT and Aadhaar Seeding</h3>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Understand the difference between Aadhaar-linked and DBT-enabled accounts through our comprehensive video guides\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 gap-8 max-w-6xl mx-auto\">\n          {/* Main Featured Video */}\n          <div className=\"md:col-span-2 lg:col-span-1\">\n            <Card className=\"overflow-hidden border border-border hover:shadow-lg transition-shadow\">\n              <div className=\"relative aspect-video bg-muted flex items-center justify-center group cursor-pointer\">\n                <div className={`absolute inset-0 ${videos[0].thumbnail} opacity-80`} />\n                <div className=\"relative z-10 text-center text-white\">\n                  <Button\n                    onClick={() => handlePlayVideo(videos[0])}\n                    className=\"bg-white/20 hover:bg-white/30 text-white border-white/50 w-16 h-16 rounded-full mb-4 group-hover:scale-110 transition-transform\"\n                    data-testid={`play-video-${videos[0].id}`}\n                  >\n                    <Play className=\"ml-1\" size={24} />\n                  </Button>\n                  <p className=\"font-medium\">{videos[0].title}</p>\n                  <div className=\"flex items-center justify-center gap-4 mt-2 text-sm opacity-90\">\n                    <span className=\"flex items-center gap-1\">\n                      <Clock size={14} />\n                      {videos[0].duration}\n                    </span>\n                    <span className=\"flex items-center gap-1\">\n                      <Globe size={14} />\n                      {videos[0].languages}\n                    </span>\n                  </div>\n                </div>\n              </div>\n              <CardContent className=\"p-6\">\n                <h4 className=\"text-xl font-semibold mb-2\">{videos[0].title}</h4>\n                <p className=\"text-muted-foreground mb-4\">{videos[0].description}</p>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center text-sm text-muted-foreground\">\n                    <Eye className=\"mr-2\" size={16} />\n                    <span>{videos[0].views}</span>\n                  </div>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => handleShareVideo(videos[0])}\n                    data-testid={`share-video-${videos[0].id}`}\n                  >\n                    <Share2 className=\"mr-2\" size={14} />\n                    Share\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Video List */}\n          <div className=\"space-y-4\">\n            {videos.slice(1).map((video) => (\n              <Card key={video.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex gap-4\">\n                    <div \n                      className={`relative w-24 h-16 ${video.thumbnail} rounded flex items-center justify-center flex-shrink-0 cursor-pointer group`}\n                      onClick={() => handlePlayVideo(video)}\n                    >\n                      <Play className=\"text-white group-hover:scale-110 transition-transform\" size={16} />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <h5 className=\"font-medium text-sm leading-tight mb-1 line-clamp-2\">\n                        {video.title}\n                      </h5>\n                      <p className=\"text-xs text-muted-foreground mb-2 line-clamp-2\">\n                        {video.description}\n                      </p>\n                      <div className=\"flex items-center gap-3 text-xs text-muted-foreground\">\n                        <span className=\"flex items-center gap-1\">\n                          <Eye size={12} />\n                          {video.views}\n                        </span>\n                        <span className=\"flex items-center gap-1\">\n                          <Clock size={12} />\n                          {video.duration}\n                        </span>\n                      </div>\n                    </div>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => handleShareVideo(video)}\n                      className=\"flex-shrink-0\"\n                      data-testid={`share-video-${video.id}`}\n                    >\n                      <Share2 size={14} />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Video Categories */}\n        <div className=\"mt-12 grid md:grid-cols-4 gap-4\">\n          {[\n            { name: \"Aadhaar Basics\", count: \"12 videos\", icon: \"🆔\" },\n            { name: \"DBT Process\", count: \"8 videos\", icon: \"💰\" },\n            { name: \"Bank Procedures\", count: \"6 videos\", icon: \"🏦\" },\n            { name: \"Troubleshooting\", count: \"10 videos\", icon: \"🛠️\" }\n          ].map((category, index) => (\n            <Card key={index} className=\"text-center hover:shadow-md transition-shadow cursor-pointer\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-3xl mb-2\">{category.icon}</div>\n                <h4 className=\"font-semibold mb-1\">{category.name}</h4>\n                <p className=\"text-sm text-muted-foreground\">{category.count}</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center mt-12\">\n          <Card className=\"bg-primary/10 border-primary/20 max-w-2xl mx-auto\">\n            <CardContent className=\"p-8\">\n              <h4 className=\"text-xl font-semibold mb-3\">📺 Subscribe for Updates</h4>\n              <p className=\"text-muted-foreground mb-6\">\n                Get notified when we release new educational videos and tutorials about scholarships and government processes.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                <Button \n                  className=\"bg-red-600 hover:bg-red-700 text-white\"\n                  data-testid=\"subscribe-youtube-button\"\n                >\n                  Subscribe on YouTube\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  data-testid=\"newsletter-subscribe-button\"\n                >\n                  Email Notifications\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":10163},"client/src/components/voice-assistant.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Mic, MicOff, Volume2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { type Language, useTranslation } from \"@/lib/i18n\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface VoiceAssistantProps {\n  isActive: boolean;\n  language: Language;\n}\n\nexport default function VoiceAssistant({ isActive, language }: VoiceAssistantProps) {\n  const [isListening, setIsListening] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const recognitionRef = useRef<any>(null);\n  const synthRef = useRef<SpeechSynthesis | null>(null);\n  const t = useTranslation(language);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      synthRef.current = window.speechSynthesis;\n      \n      if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n        const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n        recognitionRef.current = new SpeechRecognition();\n        \n        if (recognitionRef.current) {\n          recognitionRef.current.continuous = false;\n          recognitionRef.current.interimResults = false;\n          recognitionRef.current.lang = getLanguageCode(language);\n          \n          recognitionRef.current.onresult = (event: any) => {\n            const transcript = event.results[0][0].transcript;\n            handleVoiceCommand(transcript);\n          };\n          \n          recognitionRef.current.onend = () => {\n            setIsListening(false);\n          };\n          \n          recognitionRef.current.onerror = () => {\n            setIsListening(false);\n            toast({\n              title: \"Voice Error\",\n              description: \"Sorry, I couldn't understand. Please try again.\",\n              variant: \"destructive\"\n            });\n          };\n        }\n      }\n    }\n  }, [language, toast]);\n\n  const getLanguageCode = (lang: Language): string => {\n    const codes = {\n      en: 'en-US',\n      hi: 'hi-IN',\n      mai: 'hi-IN', // Fallback to Hindi\n      bho: 'hi-IN'  // Fallback to Hindi\n    };\n    return codes[lang] || 'en-US';\n  };\n\n  const speak = (text: string) => {\n    if (synthRef.current && isActive) {\n      setIsSpeaking(true);\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = getLanguageCode(language);\n      utterance.onend = () => setIsSpeaking(false);\n      synthRef.current.speak(utterance);\n    }\n  };\n\n  const startListening = () => {\n    if (recognitionRef.current && isActive) {\n      setIsListening(true);\n      recognitionRef.current.start();\n    }\n  };\n\n  const stopListening = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n\n  const handleVoiceCommand = (command: string) => {\n    const lowerCommand = command.toLowerCase();\n    \n    // Simple voice commands\n    if (lowerCommand.includes('eligibility') || lowerCommand.includes('पात्रता')) {\n      speak(language === 'en' ? \n        \"Opening eligibility wizard. Please fill in your details to check eligible scholarships.\" :\n        \"पात्रता विज़ार्ड खोल रहे हैं। कृपया अपनी जानकारी भरें।\"\n      );\n      // Trigger eligibility modal\n      const element = document.querySelector('[data-testid=\"eligibility-wizard-trigger\"]') as HTMLElement;\n      element?.click();\n    } else if (lowerCommand.includes('help') || lowerCommand.includes('सहायता')) {\n      speak(language === 'en' ? \n        \"How can I help you today? You can ask about scholarships, Aadhaar seeding, or DBT verification.\" :\n        \"आज मैं आपकी कैसे मदद कर सकता हूं? आप छात्रवृत्ति, आधार सीडिंग या डीबीटी सत्यापन के बारे में पूछ सकते हैं।\"\n      );\n    } else {\n      speak(language === 'en' ? \n        \"I understand you said: \" + command + \". Please use the navigation menu for specific actions.\" :\n        \"मैं समझ गया कि आपने कहा: \" + command + \"। कृपया विशिष्ट कार्यों के लिए नेवीगेशन मेनू का उपयोग करें।\"\n      );\n    }\n  };\n\n  if (!isActive) return null;\n\n  return (\n    <div className=\"fixed top-20 right-4 z-40 bg-card border border-border rounded-lg p-4 shadow-lg\">\n      <div className=\"flex items-center space-x-2\">\n        <Button\n          variant={isListening ? \"destructive\" : \"default\"}\n          size=\"sm\"\n          onClick={isListening ? stopListening : startListening}\n          disabled={isSpeaking}\n          className={isListening ? \"voice-recording\" : \"\"}\n          data-testid=\"voice-listen-button\"\n        >\n          {isListening ? <MicOff size={16} /> : <Mic size={16} />}\n        </Button>\n        \n        {isSpeaking && (\n          <div className=\"flex items-center text-sm text-muted-foreground\">\n            <Volume2 size={16} className=\"mr-1 voice-recording\" />\n            Speaking...\n          </div>\n        )}\n        \n        {isListening && (\n          <div className=\"text-sm text-muted-foreground\">\n            Listening...\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5447},"client/src/components/whatsapp-integration.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { MessageSquare, Check } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type Language, useTranslation } from \"@/lib/i18n\";\n\ninterface WhatsAppIntegrationProps {\n  language: Language;\n}\n\nexport default function WhatsAppIntegration({ language }: WhatsAppIntegrationProps) {\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [preferences, setPreferences] = useState({\n    deadlines: true,\n    statusUpdates: true,\n    newScholarships: true,\n    generalUpdates: false\n  });\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const t = useTranslation(language);\n  const { toast } = useToast();\n\n  const subscriptionMutation = useMutation({\n    mutationFn: async (data: { phoneNumber: string; preferences: Record<string, boolean> }) => {\n      const response = await apiRequest('POST', '/api/subscribe-whatsapp', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      setIsSubscribed(true);\n      toast({\n        title: \"WhatsApp Subscription Successful!\",\n        description: \"You'll receive scholarship updates on WhatsApp\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Subscription Failed\",\n        description: \"Please check your phone number and try again\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!phoneNumber || phoneNumber.length < 10) {\n      toast({\n        title: \"Invalid Phone Number\",\n        description: \"Please enter a valid 10-digit phone number\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const cleanNumber = phoneNumber.replace(/\\D/g, '');\n    subscriptionMutation.mutate({\n      phoneNumber: `+91${cleanNumber}`,\n      preferences\n    });\n  };\n\n  const handlePreferenceChange = (key: string, checked: boolean) => {\n    setPreferences(prev => ({\n      ...prev,\n      [key]: checked\n    }));\n  };\n\n  if (isSubscribed) {\n    return (\n      <section className=\"py-16 bg-secondary text-secondary-foreground\" data-testid=\"whatsapp-success\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-2xl mx-auto text-center\">\n            <Check className=\"mx-auto mb-4 text-6xl\" />\n            <h3 className=\"text-3xl font-bold mb-4\">Successfully Subscribed!</h3>\n            <p className=\"text-xl opacity-90 mb-8\">\n              You'll receive scholarship updates on WhatsApp at {phoneNumber}\n            </p>\n            \n            <Card className=\"bg-white/10 backdrop-blur-sm\">\n              <CardContent className=\"pt-6\">\n                <h4 className=\"font-semibold mb-4\">You'll receive notifications for:</h4>\n                <div className=\"grid md:grid-cols-2 gap-3 text-sm\">\n                  {preferences.deadlines && (\n                    <div className=\"flex items-center gap-2\">\n                      <Check size={16} />\n                      <span>Application Deadlines</span>\n                    </div>\n                  )}\n                  {preferences.statusUpdates && (\n                    <div className=\"flex items-center gap-2\">\n                      <Check size={16} />\n                      <span>Status Updates</span>\n                    </div>\n                  )}\n                  {preferences.newScholarships && (\n                    <div className=\"flex items-center gap-2\">\n                      <Check size={16} />\n                      <span>New Scholarships</span>\n                    </div>\n                  )}\n                  {preferences.generalUpdates && (\n                    <div className=\"flex items-center gap-2\">\n                      <Check size={16} />\n                      <span>General Updates</span>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-16 bg-secondary text-secondary-foreground\" data-testid=\"whatsapp-integration\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <div className=\"mb-8\">\n            <MessageSquare className=\"mx-auto mb-4 text-6xl\" />\n            <h3 className=\"text-3xl font-bold mb-4\">Stay Updated via WhatsApp</h3>\n            <p className=\"text-xl opacity-90 mb-8\">\n              Get instant notifications about scholarship deadlines, DBT status updates, and new opportunities\n            </p>\n          </div>\n          \n          <Card className=\"bg-white/10 backdrop-blur-sm\">\n            <CardContent className=\"p-8\">\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"flex flex-col sm:flex-row gap-4 max-w-lg mx-auto\">\n                  <div className=\"flex-1\">\n                    <Input \n                      type=\"tel\" \n                      placeholder=\"Enter your WhatsApp number\" \n                      value={phoneNumber}\n                      onChange={(e) => setPhoneNumber(e.target.value)}\n                      className=\"bg-white text-gray-900 placeholder-gray-500\"\n                      data-testid=\"whatsapp-phone-input\"\n                      maxLength={10}\n                    />\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    disabled={subscriptionMutation.isPending}\n                    className=\"bg-accent hover:bg-accent/80 text-accent-foreground whitespace-nowrap\"\n                    data-testid=\"whatsapp-subscribe-button\"\n                  >\n                    <MessageSquare className=\"mr-2\" size={16} />\n                    {subscriptionMutation.isPending ? \"Subscribing...\" : t('subscribeNow')}\n                  </Button>\n                </div>\n\n                {/* Notification Preferences */}\n                <div className=\"max-w-md mx-auto\">\n                  <h4 className=\"font-semibold mb-4 text-left\">Choose your notifications:</h4>\n                  <div className=\"space-y-3 text-left\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox \n                        id=\"deadlines\"\n                        checked={preferences.deadlines}\n                        onCheckedChange={(checked) => handlePreferenceChange('deadlines', checked as boolean)}\n                        data-testid=\"pref-deadlines\"\n                      />\n                      <label htmlFor=\"deadlines\" className=\"text-sm font-medium\">\n                        Application Reminders & Deadlines\n                      </label>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox \n                        id=\"status\"\n                        checked={preferences.statusUpdates}\n                        onCheckedChange={(checked) => handlePreferenceChange('statusUpdates', checked as boolean)}\n                        data-testid=\"pref-status\"\n                      />\n                      <label htmlFor=\"status\" className=\"text-sm font-medium\">\n                        DBT Status & Transfer Updates\n                      </label>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox \n                        id=\"new\"\n                        checked={preferences.newScholarships}\n                        onCheckedChange={(checked) => handlePreferenceChange('newScholarships', checked as boolean)}\n                        data-testid=\"pref-new\"\n                      />\n                      <label htmlFor=\"new\" className=\"text-sm font-medium\">\n                        New Scholarship Announcements\n                      </label>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox \n                        id=\"general\"\n                        checked={preferences.generalUpdates}\n                        onCheckedChange={(checked) => handlePreferenceChange('generalUpdates', checked as boolean)}\n                        data-testid=\"pref-general\"\n                      />\n                      <label htmlFor=\"general\" className=\"text-sm font-medium\">\n                        General Updates & Tips\n                      </label>\n                    </div>\n                  </div>\n                </div>\n              </form>\n              \n              <div className=\"mt-6 flex flex-wrap justify-center gap-4 text-sm opacity-80\">\n                <div className=\"flex items-center\">\n                  <Check className=\"mr-2\" size={16} />\n                  Free Service\n                </div>\n                <div className=\"flex items-center\">\n                  <Check className=\"mr-2\" size={16} />\n                  No Spam\n                </div>\n                <div className=\"flex items-center\">\n                  <Check className=\"mr-2\" size={16} />\n                  Unsubscribe Anytime\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9503},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/i18n.ts":{"content":"export const translations = {\n  en: {\n    title: \"Scholarship Hero\",\n    subtitle: \"Aadhaar Seeding & Scholarship Access Portal\",\n    heroTitle: \"Unlock Your Scholarship Dreams\",\n    heroSubtitle: \"Complete guide to Aadhaar seeding and scholarship access for Pre-Matric & Post-Matric students\",\n    checkEligibility: \"Check My Eligibility\",\n    dbtSimulator: \"DBT Status Simulator\",\n    voiceHelp: \"Voice Help\",\n    findCenters: \"Find Centers\",\n    playLearn: \"Play & Learn\",\n    getResources: \"Get Resources\",\n    subscribeNow: \"Subscribe Now\",\n    nextStep: \"Next Step\",\n    previousStep: \"Previous Step\",\n    submit: \"Submit\",\n    close: \"Close\"\n  },\n  hi: {\n    title: \"स्कॉलरशिप हीरो\",\n    subtitle: \"आधार सीडिंग और छात्रवृत्ति पहुंच पोर्टल\",\n    heroTitle: \"अपने छात्रवृत्ति सपनों को साकार करें\",\n    heroSubtitle: \"प्री-मैट्रिक और पोस्ट-मैट्रिक छात्रों के लिए आधार सीडिंग और छात्रवृत्ति पहुंच की पूर्ण गाइड\",\n    checkEligibility: \"मेरी पात्रता जांचें\",\n    dbtSimulator: \"डीबीटी स्थिति सिम्युलेटर\",\n    voiceHelp: \"आवाज सहायता\",\n    findCenters: \"केंद्र खोजें\",\n    playLearn: \"खेलें और सीखें\",\n    getResources: \"संसाधन प्राप्त करें\",\n    subscribeNow: \"अभी सब्सक्राइब करें\",\n    nextStep: \"अगला कदम\",\n    previousStep: \"पिछला कदम\",\n    submit: \"जमा करें\",\n    close: \"बंद करें\"\n  },\n  mai: {\n    title: \"स्कॉलरशिप हीरो\",\n    subtitle: \"आधार सीडिंग आ छात्रवृत्ति पहुंच पोर्टल\",\n    heroTitle: \"अपन छात्रवृत्ति सपना केँ साकार करू\",\n    heroSubtitle: \"प्री-मैट्रिक आ पोस्ट-मैट्रिक छात्र सबहक लेल आधार सीडिंग आ छात्रवृत्ति पहुंचक पूर्ण गाइड\",\n    checkEligibility: \"हमर पात्रता जाँच करू\",\n    dbtSimulator: \"डीबीटी स्थिति सिम्युलेटर\",\n    voiceHelp: \"आवाज सहायता\",\n    findCenters: \"केंद्र खोजू\",\n    playLearn: \"खेलू आ सीखू\",\n    getResources: \"संसाधन प्राप्त करू\",\n    subscribeNow: \"आब सब्सक्राइब करू\",\n    nextStep: \"अगिला कदम\",\n    previousStep: \"पछिला कदम\",\n    submit: \"जमा करू\",\n    close: \"बन्न करू\"\n  },\n  bho: {\n    title: \"स्कॉलरशिप हीरो\",\n    subtitle: \"आधार सीडिंग अउर छात्रवृत्ति पहुंच पोर्टल\",\n    heroTitle: \"अपना छात्रवृत्ति सपना के साकार करीं\",\n    heroSubtitle: \"प्री-मैट्रिक अउर पोस्ट-मैट्रिक छात्रन खातिर आधार सीडिंग अउर छात्रवृत्ति पहुंच के पूरा गाइड\",\n    checkEligibility: \"हमार पात्रता चेक करीं\",\n    dbtSimulator: \"डीबीटी स्थिति सिम्युलेटर\",\n    voiceHelp: \"आवाज सहायता\",\n    findCenters: \"केंद्र खोजीं\",\n    playLearn: \"खेलीं अउर सीखीं\",\n    getResources: \"संसाधन लीं\",\n    subscribeNow: \"अभी सब्सक्राइब करीं\",\n    nextStep: \"अगला कदम\",\n    previousStep: \"पिछला कदम\",\n    submit: \"जमा करीं\",\n    close: \"बंद करीं\"\n  },\n  ta: {\n    title: \"புலமைப்பரிசில் வீரன்\",\n    subtitle: \"ஆதார் விதைப்பு மற்றும் புலமைப்பரிசில் அணுகல் கட்டயம்\",\n    heroTitle: \"உங்கள் புலமைப்பரிசில் கனவுகளை நிறைவேற்றுங்கள்\",\n    heroSubtitle: \"மெட்ரிக் முன் மற்றும் மெட்ரிக் பின் மாணவர்களுக்கான ஆதார் விதைப்பு மற்றும் புலமைப்பரிசில் அணுகலின் முழுமையான வழிகாட்டி\",\n    checkEligibility: \"எனது தகுதியை சரிபார்க்கவும்\",\n    dbtSimulator: \"டிபிடி நிலை சிமுலேட்டர்\",\n    voiceHelp: \"குரல் உதவி\",\n    findCenters: \"மையங்களை கண்டறியவும்\",\n    playLearn: \"விளையாடவும் கற்கவும்\",\n    getResources: \"வளங்களை பெறவும்\",\n    subscribeNow: \"இப்போது சந்தாவாகவும்\",\n    nextStep: \"அடுத்த படி\",\n    previousStep: \"முந்தைய படி\",\n    submit: \"சமர்ப்பிக்கவும்\",\n    close: \"மூடவும்\"\n  },\n  te: {\n    title: \"స్కాలర్‌షిప్ హీరో\",\n    subtitle: \"ఆధార్ సీడింగ్ మరియు స్కాలర్‌షిప్ యాక్సెస్ పోర్టల్\",\n    heroTitle: \"మీ స్కాలర్‌షిప్ కలలను నెరవేర్చుకోండి\",\n    heroSubtitle: \"ప్రీ-మెట్రిక్ మరియు పోస్ట్-మెట్రిక్ విద్యార్థులకు ఆధార్ సీడింగ్ మరియు స్కాలర్‌షిప్ యాక్సెస్‌కు పూర్తి గైడ్\",\n    checkEligibility: \"నా అర్హతను తనిఖీ చేయండి\",\n    dbtSimulator: \"డిబిటి స్థితి సిమ్యులేటర్\",\n    voiceHelp: \"వాయిస్ సహాయం\",\n    findCenters: \"కేంద్రాలను కనుగొనండి\",\n    playLearn: \"ఆట మరియు నేర్చుకోండి\",\n    getResources: \"వనరులను పొందండి\",\n    subscribeNow: \"ఇప్పుడే సబ్‌స్క్రైబ్ చేయండి\",\n    nextStep: \"తదుపరి దశ\",\n    previousStep: \"మునుపటి దశ\",\n    submit: \"సమర్పించండి\",\n    close: \"మూసివేయండి\"\n  }\n};\n\nexport type Language = keyof typeof translations;\nexport type TranslationKey = keyof typeof translations.en;\n\nexport const useTranslation = (language: Language) => {\n  return (key: TranslationKey): string => {\n    return translations[language][key] || translations.en[key];\n  };\n};\n","size_bytes":7422},"client/src/lib/openai.ts":{"content":"// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n\nexport const chatWithAI = async (message: string, userId?: string) => {\n  try {\n    const response = await fetch('/api/chat', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        message,\n        userId: userId || 'anonymous'\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to get AI response');\n    }\n\n    const data = await response.json();\n    return data.response;\n  } catch (error) {\n    console.error('Chat error:', error);\n    return \"मुझे खुशी होगी आपकी मदद करने में, लेकिन अभी कुछ तकनीकी समस्या है। कृपया बाद में पुनः प्रयास करें।\";\n  }\n};\n","size_bytes":941},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { GraduationCap, UserCheck, Dock, MapPin, Gamepad2, Calendar, FileText, MessageSquare } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport EligibilityWizard from \"@/components/eligibility-wizard\";\nimport DBTSimulator from \"@/components/dbt-simulator\";\nimport HelpCenterMap from \"@/components/help-center-map\";\nimport GamifiedLearning from \"@/components/gamified-learning\";\nimport CountdownTracker from \"@/components/countdown-tracker\";\nimport ParentToolkit from \"@/components/parent-toolkit\";\nimport AIchatAssistant from \"@/components/ai-chat-assistant\";\nimport VideoSection from \"@/components/video-section\";\nimport WhatsAppIntegration from \"@/components/whatsapp-integration\";\nimport { type Language } from \"@/lib/i18n\";\nimport { useTranslation } from \"@/lib/i18n\";\n\nexport default function Home() {\n  const [language, setLanguage] = useState<Language>(\"en\");\n  const [eligibilityWizardOpen, setEligibilityWizardOpen] = useState(false);\n  const [dbtSimulatorOpen, setDBTSimulatorOpen] = useState(false);\n  const [helpCenterMapOpen, setHelpCenterMapOpen] = useState(false);\n  const [gamifiedLearningOpen, setGamifiedLearningOpen] = useState(false);\n  const [countdownTrackerOpen, setCountdownTrackerOpen] = useState(false);\n  const [parentToolkitOpen, setParentToolkitOpen] = useState(false);\n  const [chatAssistantOpen, setChatAssistantOpen] = useState(false);\n  const t = useTranslation(language);\n\n  const stats = [\n    { value: \"50,000+\", label: \"Students Helped\" },\n    { value: \"₹500Cr+\", label: \"Scholarships Unlocked\" },\n    { value: \"24/7\", label: \"AI Support\" },\n    { value: \"4\", label: \"Languages\" }\n  ];\n\n  const services = [\n    {\n      icon: UserCheck,\n      title: \"Smart Eligibility Wizard\",\n      description: \"Answer a few questions to discover all scholarships you're eligible for with our intelligent matching system.\",\n      color: \"bg-primary/10 text-primary\",\n      buttonColor: \"bg-primary hover:bg-primary/90 text-primary-foreground\",\n      onClick: () => setEligibilityWizardOpen(true),\n      testId: \"eligibility-wizard-trigger\"\n    },\n    {\n      icon: Dock,\n      title: \"DBT Status Simulator\",\n      description: \"Practice checking your DBT seeding status with our realistic simulation of bank and UIDAI portals.\",\n      color: \"bg-secondary/10 text-secondary\",\n      buttonColor: \"bg-secondary hover:bg-secondary/90 text-secondary-foreground\",\n      onClick: () => setDBTSimulatorOpen(true),\n      testId: \"dbt-simulator-trigger\"\n    },\n    {\n      icon: MapPin,\n      title: \"Find Help Centers\",\n      description: \"Locate nearby banks, CSCs, and UIDAI offices for Aadhaar seeding assistance with directions and contact info.\",\n      color: \"bg-accent/10 text-accent\",\n      buttonColor: \"bg-accent hover:bg-accent/80 text-accent-foreground\",\n      onClick: () => setHelpCenterMapOpen(true),\n      testId: \"help-center-map-trigger\"\n    },\n    {\n      icon: Gamepad2,\n      title: \"Learning Games\",\n      description: \"Master Aadhaar concepts through fun quizzes and earn badges while learning about DBT processes.\",\n      color: \"bg-purple-100 text-purple-600\",\n      buttonColor: \"bg-purple-600 hover:bg-purple-700 text-white\",\n      onClick: () => setGamifiedLearningOpen(true),\n      testId: \"gamified-learning-trigger\"\n    },\n    {\n      icon: Calendar,\n      title: \"Scholarship Timeline\",\n      description: \"Track important dates for applications, verification, and disbursement with personalized reminders.\",\n      color: \"bg-pink-100 text-pink-600\",\n      buttonColor: \"bg-pink-600 hover:bg-pink-700 text-white\",\n      onClick: () => setCountdownTrackerOpen(true),\n      testId: \"countdown-tracker-trigger\"\n    },\n    {\n      icon: FileText,\n      title: \"Educator Resources\",\n      description: \"Download posters, guides, and presentation materials for PTA meetings and awareness campaigns.\",\n      color: \"bg-green-100 text-green-600\",\n      buttonColor: \"bg-green-600 hover:bg-green-700 text-white\",\n      onClick: () => setParentToolkitOpen(true),\n      testId: \"parent-toolkit-trigger\"\n    }\n  ];\n\n  const successStories = [\n    {\n      name: \"Priya Sharma\",\n      location: \"Bihar, Class 12\",\n      testimonial: \"The DBT simulator helped me understand exactly what to expect. I successfully seeded my account and received my Post-Matric scholarship within 2 weeks!\",\n      amount: \"₹45,000 received\",\n      initial: \"P\"\n    },\n    {\n      name: \"Rahul Kumar\",\n      location: \"Jharkhand, Class 10\",\n      testimonial: \"My family didn't know about Pre-Matric scholarships. The eligibility wizard showed me 3 scholarships I qualified for. Amazing!\",\n      amount: \"₹12,000 received\",\n      initial: \"R\"\n    },\n    {\n      name: \"Anjali Devi\",\n      location: \"West Bengal, Graduate\",\n      testimonial: \"The WhatsApp reminders ensured I never missed any deadlines. I'm now pursuing my engineering degree thanks to these scholarships.\",\n      amount: \"₹85,000 received\",\n      initial: \"A\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header language={language} onLanguageChange={setLanguage} />\n\n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-br from-primary to-secondary text-primary-foreground py-16 overflow-hidden\">\n        {/* Background pattern overlay */}\n        <div className=\"absolute inset-0 opacity-10\">\n          <div \n            className=\"absolute inset-0\" \n            style={{\n              backgroundImage: `url('data:image/svg+xml,%3Csvg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" xmlns=\"http://www.w3.org/2000/svg\"%3E%3Cg fill=\"none\" fill-rule=\"evenodd\"%3E%3Cg fill=\"%23ffffff\" fill-opacity=\"0.1\"%3E%3Cpath d=\"M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z\"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')`\n            }}\n          />\n        </div>\n        \n        <div className=\"container mx-auto px-4 relative z-10\">\n          <div className=\"text-center max-w-4xl mx-auto\">\n            <h2 className=\"text-4xl md:text-6xl font-bold mb-6 leading-tight\">\n              Unlock Your <span className=\"text-accent\">Scholarship</span> Dreams\n            </h2>\n            <p className=\"text-xl md:text-2xl mb-8 opacity-90\">\n              Complete guide to Aadhaar seeding and scholarship access for Pre-Matric & Post-Matric students\n            </p>\n            \n            {/* CTA Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n              <Button \n                onClick={() => setEligibilityWizardOpen(true)}\n                className=\"bg-accent hover:bg-accent/80 text-accent-foreground px-8 py-4 rounded-lg font-semibold text-lg shadow-lg\"\n                data-testid=\"hero-check-eligibility\"\n              >\n                <UserCheck className=\"mr-2\" size={20} />\n                {t('checkEligibility')}\n              </Button>\n              <Button \n                onClick={() => setDBTSimulatorOpen(true)}\n                variant=\"outline\"\n                className=\"border-2 border-accent text-accent hover:bg-accent hover:text-accent-foreground px-8 py-4 rounded-lg font-semibold text-lg bg-transparent\"\n                data-testid=\"hero-dbt-simulator\"\n              >\n                <Dock className=\"mr-2\" size={20} />\n                {t('dbtSimulator')}\n              </Button>\n            </div>\n            \n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n              {stats.map((stat, index) => (\n                <div key={index} className=\"bg-white/10 rounded-lg p-4 glass-effect\">\n                  <div className=\"text-2xl font-bold text-accent\">{stat.value}</div>\n                  <div className=\"text-sm opacity-80\">{stat.label}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Main Services */}\n      <section className=\"py-16 bg-muted\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold mb-4\">Your Scholarship Journey Starts Here</h3>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Navigate through our comprehensive tools designed to make scholarship access simple and transparent\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {services.map((service, index) => (\n              <Card key={index} className=\"hover:shadow-xl transition-shadow border border-border\">\n                <CardHeader className=\"pb-4\">\n                  <div className={`w-16 h-16 rounded-lg flex items-center justify-center mb-4 ${service.color}`}>\n                    <service.icon size={32} />\n                  </div>\n                  <CardTitle className=\"text-xl font-semibold mb-3\">{service.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground mb-6\">{service.description}</p>\n                  <Button \n                    onClick={service.onClick}\n                    className={`w-full ${service.buttonColor} font-medium transition-colors`}\n                    data-testid={service.testId}\n                  >\n                    {service.title.includes('Wizard') ? 'Start Wizard' :\n                     service.title.includes('Simulator') ? 'Try Simulator' :\n                     service.title.includes('Centers') ? 'Find Centers' :\n                     service.title.includes('Games') ? 'Play & Learn' :\n                     service.title.includes('Timeline') ? 'View Timeline' :\n                     'Get Resources'}\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Video Awareness Section */}\n      <VideoSection language={language} />\n\n      {/* WhatsApp Integration */}\n      <WhatsAppIntegration language={language} />\n\n      {/* Success Stories */}\n      <section className=\"py-16 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold mb-4\">Success Stories</h3>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Real students sharing how Scholarship Hero helped them unlock their educational funding\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {successStories.map((story, index) => (\n              <Card key={index} className=\"border border-border\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"bg-primary text-primary-foreground w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg\">\n                      {story.initial}\n                    </div>\n                    <div className=\"ml-4\">\n                      <h4 className=\"font-semibold\">{story.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{story.location}</p>\n                    </div>\n                  </div>\n                  <p className=\"text-muted-foreground mb-4\">{story.testimonial}</p>\n                  <div className=\"flex items-center text-sm text-accent\">\n                    <span className=\"mr-1\">₹</span>\n                    <span>{story.amount}</span>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      <Footer language={language} />\n\n      {/* Floating Chat Bot */}\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        <Button\n          onClick={() => setChatAssistantOpen(true)}\n          className=\"bg-accent hover:bg-accent/80 text-accent-foreground w-16 h-16 rounded-full shadow-lg animate-bounce-slow\"\n          data-testid=\"floating-chat-bot\"\n        >\n          <MessageSquare size={24} />\n        </Button>\n      </div>\n\n      {/* Modals */}\n      <EligibilityWizard \n        isOpen={eligibilityWizardOpen} \n        onClose={() => setEligibilityWizardOpen(false)}\n        language={language}\n      />\n      <DBTSimulator \n        isOpen={dbtSimulatorOpen} \n        onClose={() => setDBTSimulatorOpen(false)}\n        language={language}\n      />\n      <HelpCenterMap \n        isOpen={helpCenterMapOpen} \n        onClose={() => setHelpCenterMapOpen(false)}\n        language={language}\n      />\n      <GamifiedLearning \n        isOpen={gamifiedLearningOpen} \n        onClose={() => setGamifiedLearningOpen(false)}\n        language={language}\n      />\n      <CountdownTracker \n        isOpen={countdownTrackerOpen} \n        onClose={() => setCountdownTrackerOpen(false)}\n        language={language}\n      />\n      <ParentToolkit \n        isOpen={parentToolkitOpen} \n        onClose={() => setParentToolkitOpen(false)}\n        language={language}\n      />\n      <AIchatAssistant \n        isOpen={chatAssistantOpen} \n        onClose={() => setChatAssistantOpen(false)}\n        language={language}\n      />\n    </div>\n  );\n}\n","size_bytes":13417},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}